"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from clerk_backend_api import models, utils
from clerk_backend_api._hooks import HookContext
from clerk_backend_api.types import OptionalNullable, UNSET
from typing import Mapping, Optional


class Miscellaneous(BaseSDK):
    def get_public_interstitial(
        self,
        *,
        frontend_api_query_parameter: Optional[str] = None,
        frontend_api_query_parameter1: Optional[str] = None,
        publishable_key: Optional[str] = None,
        proxy_url: Optional[str] = None,
        domain: Optional[str] = None,
        sign_in_url: Optional[str] = None,
        use_domain_for_script: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Returns the markup for the interstitial page

        The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user's authentication state.
        It is used by Clerk SDKs when the user's authentication state cannot be immediately determined.

        :param frontend_api_query_parameter: Please use `frontend_api` instead
        :param frontend_api_query_parameter1: The Frontend API key of your instance
        :param publishable_key: The publishable key of your instance
        :param proxy_url: The proxy URL of your instance
        :param domain: The domain of your instance
        :param sign_in_url: The sign in URL of your instance
        :param use_domain_for_script: Whether to use the domain for the script URL
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetPublicInterstitialRequest(
            frontend_api_query_parameter=frontend_api_query_parameter,
            frontend_api_query_parameter1=frontend_api_query_parameter1,
            publishable_key=publishable_key,
            proxy_url=proxy_url,
            domain=domain,
            sign_in_url=sign_in_url,
            use_domain_for_script=use_domain_for_script,
        )

        req = self._build_request(
            method="GET",
            path="/public/interstitial",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="GetPublicInterstitial",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["400", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_public_interstitial_async(
        self,
        *,
        frontend_api_query_parameter: Optional[str] = None,
        frontend_api_query_parameter1: Optional[str] = None,
        publishable_key: Optional[str] = None,
        proxy_url: Optional[str] = None,
        domain: Optional[str] = None,
        sign_in_url: Optional[str] = None,
        use_domain_for_script: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Returns the markup for the interstitial page

        The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user's authentication state.
        It is used by Clerk SDKs when the user's authentication state cannot be immediately determined.

        :param frontend_api_query_parameter: Please use `frontend_api` instead
        :param frontend_api_query_parameter1: The Frontend API key of your instance
        :param publishable_key: The publishable key of your instance
        :param proxy_url: The proxy URL of your instance
        :param domain: The domain of your instance
        :param sign_in_url: The sign in URL of your instance
        :param use_domain_for_script: Whether to use the domain for the script URL
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetPublicInterstitialRequest(
            frontend_api_query_parameter=frontend_api_query_parameter,
            frontend_api_query_parameter1=frontend_api_query_parameter1,
            publishable_key=publishable_key,
            proxy_url=proxy_url,
            domain=domain,
            sign_in_url=sign_in_url,
            use_domain_for_script=use_domain_for_script,
        )

        req = self._build_request_async(
            method="GET",
            path="/public/interstitial",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="GetPublicInterstitial",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["400", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
