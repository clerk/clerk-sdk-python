"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api import utils
from clerk_backend_api.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class VerifyOAuthAccessTokenRequestBodyTypedDict(TypedDict):
    access_token: NotRequired[str]
    r"""The access token to verify."""
    secret: NotRequired[str]
    r"""The access token to verify. This is deprecated, use `access_token` instead."""


class VerifyOAuthAccessTokenRequestBody(BaseModel):
    access_token: Optional[str] = None
    r"""The access token to verify."""

    secret: Annotated[
        Optional[str],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None
    r"""The access token to verify. This is deprecated, use `access_token` instead."""


class VerifyOAuthAccessTokenErrorsTypedDict(TypedDict):
    message: str
    long_message: str
    code: str


class VerifyOAuthAccessTokenErrors(BaseModel):
    message: str

    long_message: str

    code: str


class VerifyOAuthAccessTokenOauthAccessTokensResponseResponseBodyData(BaseModel):
    errors: List[VerifyOAuthAccessTokenErrors]


class VerifyOAuthAccessTokenOauthAccessTokensResponseResponseBody(Exception):
    r"""404 Not Found"""

    data: VerifyOAuthAccessTokenOauthAccessTokensResponseResponseBodyData

    def __init__(
        self, data: VerifyOAuthAccessTokenOauthAccessTokensResponseResponseBodyData
    ):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, VerifyOAuthAccessTokenOauthAccessTokensResponseResponseBodyData
        )


class ErrorsTypedDict(TypedDict):
    message: str
    long_message: str
    code: str


class Errors(BaseModel):
    message: str

    long_message: str

    code: str


class VerifyOAuthAccessTokenOauthAccessTokensResponseBodyData(BaseModel):
    errors: List[Errors]


class VerifyOAuthAccessTokenOauthAccessTokensResponseBody(Exception):
    r"""400 Bad Request"""

    data: VerifyOAuthAccessTokenOauthAccessTokensResponseBodyData

    def __init__(self, data: VerifyOAuthAccessTokenOauthAccessTokensResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, VerifyOAuthAccessTokenOauthAccessTokensResponseBodyData
        )


class VerifyOAuthAccessTokenObject(str, Enum):
    CLERK_IDP_OAUTH_ACCESS_TOKEN = "clerk_idp_oauth_access_token"


class VerifyOAuthAccessTokenResponseBodyTypedDict(TypedDict):
    r"""200 OK"""

    object: VerifyOAuthAccessTokenObject
    id: str
    client_id: str
    subject: str
    scopes: List[str]
    revoked: bool
    revocation_reason: Nullable[str]
    expired: bool
    expiration: Nullable[float]
    created_at: float
    updated_at: float


class VerifyOAuthAccessTokenResponseBody(BaseModel):
    r"""200 OK"""

    object: VerifyOAuthAccessTokenObject

    id: str

    client_id: str

    subject: str

    scopes: List[str]

    revoked: bool

    revocation_reason: Nullable[str]

    expired: bool

    expiration: Nullable[float]

    created_at: float

    updated_at: float

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["revocation_reason", "expiration"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
