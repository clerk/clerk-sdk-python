"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .commercesubscriptionitem import (
    CommerceSubscriptionItem,
    CommerceSubscriptionItemTypedDict,
)
from .commercesubscriptionnextpayment import (
    CommerceSubscriptionNextPayment,
    CommerceSubscriptionNextPaymentTypedDict,
)
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class CommerceSubscriptionObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value."""

    COMMERCE_SUBSCRIPTION = "commerce_subscription"


class CommerceSubscriptionStatus(str, Enum):
    r"""The current status of the subscription."""

    ACTIVE = "active"
    PAST_DUE = "past_due"
    CANCELED = "canceled"
    ENDED = "ended"
    ABANDONED = "abandoned"
    INCOMPLETE = "incomplete"


class CommerceSubscriptionTypedDict(TypedDict):
    r"""A commerce subscription."""

    object: CommerceSubscriptionObject
    r"""String representing the object's type. Objects of the same type share the same value."""
    id: str
    r"""Unique identifier for the commerce subscription."""
    instance_id: str
    r"""The ID of the instance this subscription belongs to."""
    status: CommerceSubscriptionStatus
    r"""The current status of the subscription."""
    payer_id: str
    r"""The ID of the payer for this subscription."""
    created_at: int
    r"""Unix timestamp (milliseconds) of creation."""
    updated_at: int
    r"""Unix timestamp (milliseconds) of last update."""
    subscription_items: List[CommerceSubscriptionItemTypedDict]
    r"""Array of subscription items in this subscription."""
    active_at: NotRequired[Nullable[int]]
    r"""Unix timestamp (milliseconds) when the subscription became active."""
    past_due_at: NotRequired[Nullable[int]]
    r"""Unix timestamp (milliseconds) when the subscription became past due."""
    next_payment: NotRequired[CommerceSubscriptionNextPaymentTypedDict]
    eligible_for_free_trial: NotRequired[Nullable[bool]]
    r"""Whether the payer is eligible for a free trial."""


class CommerceSubscription(BaseModel):
    r"""A commerce subscription."""

    object: CommerceSubscriptionObject
    r"""String representing the object's type. Objects of the same type share the same value."""

    id: str
    r"""Unique identifier for the commerce subscription."""

    instance_id: str
    r"""The ID of the instance this subscription belongs to."""

    status: CommerceSubscriptionStatus
    r"""The current status of the subscription."""

    payer_id: str
    r"""The ID of the payer for this subscription."""

    created_at: int
    r"""Unix timestamp (milliseconds) of creation."""

    updated_at: int
    r"""Unix timestamp (milliseconds) of last update."""

    subscription_items: List[CommerceSubscriptionItem]
    r"""Array of subscription items in this subscription."""

    active_at: OptionalNullable[int] = UNSET
    r"""Unix timestamp (milliseconds) when the subscription became active."""

    past_due_at: OptionalNullable[int] = UNSET
    r"""Unix timestamp (milliseconds) when the subscription became past due."""

    next_payment: Optional[CommerceSubscriptionNextPayment] = None

    eligible_for_free_trial: OptionalNullable[bool] = UNSET
    r"""Whether the payer is eligible for a free trial."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "active_at",
            "past_due_at",
            "next_payment",
            "eligible_for_free_trial",
        ]
        nullable_fields = ["active_at", "past_due_at", "eligible_for_free_trial"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
