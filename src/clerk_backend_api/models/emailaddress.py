"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .identificationlink import IdentificationLink, IdentificationLinkTypedDict
from clerk_backend_api import utils
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from clerk_backend_api.utils import validate_open_enum
from enum import Enum
from pydantic import model_serializer
from pydantic.functional_validators import PlainValidator
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class EmailAddressObject(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""String representing the object's type. Objects of the same type share the same value."""

    EMAIL_ADDRESS = "email_address"


class FromOAuthVerificationStatus(str, Enum):
    UNVERIFIED = "unverified"
    VERIFIED = "verified"


class ErrorMetaTypedDict(TypedDict):
    pass


class ErrorMeta(BaseModel):
    pass


class ErrorClerkErrorTypedDict(TypedDict):
    message: str
    long_message: str
    code: str
    meta: NotRequired[ErrorMetaTypedDict]
    clerk_trace_id: NotRequired[str]


class ErrorClerkError(BaseModel):
    message: str

    long_message: str

    code: str

    meta: Optional[ErrorMeta] = None

    clerk_trace_id: Optional[str] = None


ErrorTypedDict = ErrorClerkErrorTypedDict


Error = ErrorClerkError


class FromOAuthTypedDict(TypedDict):
    status: FromOAuthVerificationStatus
    strategy: str
    expire_at: Nullable[int]
    attempts: Nullable[int]
    error: NotRequired[Nullable[ErrorTypedDict]]
    verified_at_client: NotRequired[Nullable[str]]


class FromOAuth(BaseModel):
    status: FromOAuthVerificationStatus

    strategy: str

    expire_at: Nullable[int]

    attempts: Nullable[int]

    error: OptionalNullable[Error] = UNSET

    verified_at_client: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["error", "verified_at_client"]
        nullable_fields = ["expire_at", "attempts", "error", "verified_at_client"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class AdminVerificationStatus(str, Enum):
    VERIFIED = "verified"


class VerificationStrategy(str, Enum, metaclass=utils.OpenEnumMeta):
    ADMIN = "admin"


class AdminTypedDict(TypedDict):
    status: AdminVerificationStatus
    strategy: VerificationStrategy
    attempts: Nullable[int]
    expire_at: Nullable[int]
    verified_at_client: NotRequired[Nullable[str]]


class Admin(BaseModel):
    status: AdminVerificationStatus

    strategy: Annotated[VerificationStrategy, PlainValidator(validate_open_enum(False))]

    attempts: Nullable[int]

    expire_at: Nullable[int]

    verified_at_client: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["verified_at_client"]
        nullable_fields = ["attempts", "expire_at", "verified_at_client"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class VerificationStatus(str, Enum):
    UNVERIFIED = "unverified"
    VERIFIED = "verified"
    FAILED = "failed"
    EXPIRED = "expired"


class Strategy(str, Enum, metaclass=utils.OpenEnumMeta):
    PHONE_CODE = "phone_code"
    EMAIL_CODE = "email_code"
    EMAIL_LINK = "email_link"
    RESET_PASSWORD_EMAIL_CODE = "reset_password_email_code"
    FROM_OAUTH_DISCORD = "from_oauth_discord"
    FROM_OAUTH_GOOGLE = "from_oauth_google"
    FROM_OAUTH_APPLE = "from_oauth_apple"
    FROM_OAUTH_MICROSOFT = "from_oauth_microsoft"
    FROM_OAUTH_GITHUB = "from_oauth_github"


class OtpTypedDict(TypedDict):
    status: VerificationStatus
    strategy: Strategy
    attempts: Nullable[int]
    expire_at: Nullable[int]
    verified_at_client: NotRequired[Nullable[str]]


class Otp(BaseModel):
    status: VerificationStatus

    strategy: Annotated[Strategy, PlainValidator(validate_open_enum(False))]

    attempts: Nullable[int]

    expire_at: Nullable[int]

    verified_at_client: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["verified_at_client"]
        nullable_fields = ["attempts", "expire_at", "verified_at_client"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


VerificationTypedDict = TypeAliasType(
    "VerificationTypedDict", Union[OtpTypedDict, AdminTypedDict, FromOAuthTypedDict]
)


Verification = TypeAliasType("Verification", Union[Otp, Admin, FromOAuth])


class EmailAddressTypedDict(TypedDict):
    r"""Success"""

    object: EmailAddressObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    email_address: str
    reserved: bool
    verification: Nullable[VerificationTypedDict]
    linked_to: List[IdentificationLinkTypedDict]
    created_at: int
    r"""Unix timestamp of creation

    """
    updated_at: int
    r"""Unix timestamp of creation

    """
    id: NotRequired[str]
    matches_sso_connection: NotRequired[bool]
    r"""Indicates whether this email address domain matches an active enterprise connection.

    """


class EmailAddress(BaseModel):
    r"""Success"""

    object: Annotated[EmailAddressObject, PlainValidator(validate_open_enum(False))]
    r"""String representing the object's type. Objects of the same type share the same value.

    """

    email_address: str

    reserved: bool

    verification: Nullable[Verification]

    linked_to: List[IdentificationLink]

    created_at: int
    r"""Unix timestamp of creation

    """

    updated_at: int
    r"""Unix timestamp of creation

    """

    id: Optional[str] = None

    matches_sso_connection: Optional[bool] = None
    r"""Indicates whether this email address domain matches an active enterprise connection.

    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["id", "matches_sso_connection"]
        nullable_fields = ["verification"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
