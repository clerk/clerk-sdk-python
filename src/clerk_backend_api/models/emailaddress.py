"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .identificationlink import IdentificationLink, IdentificationLinkTypedDict
from clerk_backend_api import utils
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from clerk_backend_api.utils import get_discriminator, validate_open_enum
from enum import Enum
from pydantic import Discriminator, Tag, model_serializer
from pydantic.functional_validators import PlainValidator
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class EmailAddressObject(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""String representing the object's type. Objects of the same type share the same value."""

    EMAIL_ADDRESS = "email_address"


class VerificationEmailLinkVerificationObject(str, Enum):
    VERIFICATION_EMAIL_LINK = "verification_email_link"


class VerificationEmailLinkVerificationStatus(str, Enum):
    UNVERIFIED = "unverified"
    VERIFIED = "verified"
    FAILED = "failed"
    EXPIRED = "expired"


class VerificationEmailLinkVerificationStrategy(str, Enum):
    EMAIL_LINK = "email_link"


class EmailLinkTypedDict(TypedDict):
    status: VerificationEmailLinkVerificationStatus
    strategy: VerificationEmailLinkVerificationStrategy
    attempts: Nullable[int]
    expire_at: Nullable[int]
    object: NotRequired[VerificationEmailLinkVerificationObject]
    verified_at_client: NotRequired[Nullable[str]]


class EmailLink(BaseModel):
    status: VerificationEmailLinkVerificationStatus

    strategy: VerificationEmailLinkVerificationStrategy

    attempts: Nullable[int]

    expire_at: Nullable[int]

    object: Optional[VerificationEmailLinkVerificationObject] = None

    verified_at_client: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["object", "verified_at_client"]
        nullable_fields = ["attempts", "expire_at", "verified_at_client"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class VerificationSamlVerificationObject(str, Enum):
    VERIFICATION_SAML = "verification_saml"


class VerificationSamlVerificationStatus(str, Enum):
    UNVERIFIED = "unverified"
    VERIFIED = "verified"
    FAILED = "failed"
    EXPIRED = "expired"
    TRANSFERABLE = "transferable"


class VerificationSamlVerificationStrategy(str, Enum):
    SAML = "saml"


class ClerkErrorErrorMetaTypedDict(TypedDict):
    pass


class ClerkErrorErrorMeta(BaseModel):
    pass


class VerificationSamlErrorClerkErrorTypedDict(TypedDict):
    message: str
    long_message: str
    code: str
    meta: NotRequired[ClerkErrorErrorMetaTypedDict]
    clerk_trace_id: NotRequired[str]


class VerificationSamlErrorClerkError(BaseModel):
    message: str

    long_message: str

    code: str

    meta: Optional[ClerkErrorErrorMeta] = None

    clerk_trace_id: Optional[str] = None


VerificationErrorTypedDict = VerificationSamlErrorClerkErrorTypedDict


VerificationError = VerificationSamlErrorClerkError


class SamlTypedDict(TypedDict):
    status: VerificationSamlVerificationStatus
    strategy: VerificationSamlVerificationStrategy
    external_verification_redirect_url: Nullable[str]
    expire_at: int
    attempts: Nullable[int]
    object: NotRequired[VerificationSamlVerificationObject]
    error: NotRequired[Nullable[VerificationErrorTypedDict]]
    verified_at_client: NotRequired[Nullable[str]]


class Saml(BaseModel):
    status: VerificationSamlVerificationStatus

    strategy: VerificationSamlVerificationStrategy

    external_verification_redirect_url: Nullable[str]

    expire_at: int

    attempts: Nullable[int]

    object: Optional[VerificationSamlVerificationObject] = None

    error: OptionalNullable[VerificationError] = UNSET

    verified_at_client: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["object", "error", "verified_at_client"]
        nullable_fields = [
            "external_verification_redirect_url",
            "error",
            "attempts",
            "verified_at_client",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class VerificationTicketVerificationObject(str, Enum):
    VERIFICATION_TICKET = "verification_ticket"


class VerificationTicketVerificationStatus(str, Enum):
    UNVERIFIED = "unverified"
    VERIFIED = "verified"
    EXPIRED = "expired"


class VerificationTicketVerificationStrategy(str, Enum, metaclass=utils.OpenEnumMeta):
    TICKET = "ticket"


class TicketTypedDict(TypedDict):
    status: VerificationTicketVerificationStatus
    strategy: VerificationTicketVerificationStrategy
    attempts: Nullable[int]
    expire_at: Nullable[int]
    object: NotRequired[VerificationTicketVerificationObject]
    verified_at_client: NotRequired[Nullable[str]]


class Ticket(BaseModel):
    status: VerificationTicketVerificationStatus

    strategy: Annotated[
        VerificationTicketVerificationStrategy,
        PlainValidator(validate_open_enum(False)),
    ]

    attempts: Nullable[int]

    expire_at: Nullable[int]

    object: Optional[VerificationTicketVerificationObject] = None

    verified_at_client: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["object", "verified_at_client"]
        nullable_fields = ["attempts", "expire_at", "verified_at_client"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class VerificationFromOauthVerificationObject(str, Enum):
    VERIFICATION_FROM_OAUTH = "verification_from_oauth"


class VerificationFromOauthVerificationStatus(str, Enum):
    UNVERIFIED = "unverified"
    VERIFIED = "verified"


class ErrorMetaTypedDict(TypedDict):
    pass


class ErrorMeta(BaseModel):
    pass


class ErrorClerkErrorTypedDict(TypedDict):
    message: str
    long_message: str
    code: str
    meta: NotRequired[ErrorMetaTypedDict]
    clerk_trace_id: NotRequired[str]


class ErrorClerkError(BaseModel):
    message: str

    long_message: str

    code: str

    meta: Optional[ErrorMeta] = None

    clerk_trace_id: Optional[str] = None


ErrorTypedDict = ErrorClerkErrorTypedDict


Error = ErrorClerkError


class FromOAuthTypedDict(TypedDict):
    status: VerificationFromOauthVerificationStatus
    strategy: str
    expire_at: Nullable[int]
    attempts: Nullable[int]
    object: NotRequired[VerificationFromOauthVerificationObject]
    error: NotRequired[Nullable[ErrorTypedDict]]
    verified_at_client: NotRequired[Nullable[str]]


class FromOAuth(BaseModel):
    status: VerificationFromOauthVerificationStatus

    strategy: str

    expire_at: Nullable[int]

    attempts: Nullable[int]

    object: Optional[VerificationFromOauthVerificationObject] = None

    error: OptionalNullable[Error] = UNSET

    verified_at_client: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["object", "error", "verified_at_client"]
        nullable_fields = ["error", "expire_at", "attempts", "verified_at_client"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class VerificationAdminVerificationObject(str, Enum):
    VERIFICATION_ADMIN = "verification_admin"


class VerificationAdminVerificationStatus(str, Enum):
    VERIFIED = "verified"


class VerificationStrategy(str, Enum, metaclass=utils.OpenEnumMeta):
    ADMIN = "admin"


class AdminTypedDict(TypedDict):
    status: VerificationAdminVerificationStatus
    strategy: VerificationStrategy
    attempts: Nullable[int]
    expire_at: Nullable[int]
    object: NotRequired[VerificationAdminVerificationObject]
    verified_at_client: NotRequired[Nullable[str]]


class Admin(BaseModel):
    status: VerificationAdminVerificationStatus

    strategy: Annotated[VerificationStrategy, PlainValidator(validate_open_enum(False))]

    attempts: Nullable[int]

    expire_at: Nullable[int]

    object: Optional[VerificationAdminVerificationObject] = None

    verified_at_client: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["object", "verified_at_client"]
        nullable_fields = ["attempts", "expire_at", "verified_at_client"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class VerificationObject(str, Enum):
    VERIFICATION_OTP = "verification_otp"


class VerificationStatus(str, Enum):
    UNVERIFIED = "unverified"
    VERIFIED = "verified"
    FAILED = "failed"
    EXPIRED = "expired"


class Strategy(str, Enum, metaclass=utils.OpenEnumMeta):
    PHONE_CODE = "phone_code"
    EMAIL_CODE = "email_code"
    RESET_PASSWORD_EMAIL_CODE = "reset_password_email_code"


class OtpTypedDict(TypedDict):
    status: VerificationStatus
    strategy: Strategy
    attempts: Nullable[int]
    expire_at: Nullable[int]
    object: NotRequired[VerificationObject]
    verified_at_client: NotRequired[Nullable[str]]


class Otp(BaseModel):
    status: VerificationStatus

    strategy: Annotated[Strategy, PlainValidator(validate_open_enum(False))]

    attempts: Nullable[int]

    expire_at: Nullable[int]

    object: Optional[VerificationObject] = None

    verified_at_client: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["object", "verified_at_client"]
        nullable_fields = ["attempts", "expire_at", "verified_at_client"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


VerificationTypedDict = TypeAliasType(
    "VerificationTypedDict",
    Union[
        OtpTypedDict,
        AdminTypedDict,
        TicketTypedDict,
        EmailLinkTypedDict,
        FromOAuthTypedDict,
        SamlTypedDict,
    ],
)


Verification = Annotated[
    Union[
        Annotated[Otp, Tag("verification_otp")],
        Annotated[Admin, Tag("verification_admin")],
        Annotated[FromOAuth, Tag("verification_from_oauth")],
        Annotated[Ticket, Tag("verification_ticket")],
        Annotated[Saml, Tag("verification_saml")],
        Annotated[EmailLink, Tag("verification_email_link")],
    ],
    Discriminator(lambda m: get_discriminator(m, "object", "object")),
]


class EmailAddressTypedDict(TypedDict):
    r"""Success"""

    object: EmailAddressObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    email_address: str
    reserved: bool
    verification: Nullable[VerificationTypedDict]
    linked_to: List[IdentificationLinkTypedDict]
    created_at: int
    r"""Unix timestamp of creation

    """
    updated_at: int
    r"""Unix timestamp of creation

    """
    id: NotRequired[str]
    matches_sso_connection: NotRequired[bool]
    r"""Indicates whether this email address domain matches an active enterprise connection.

    """


class EmailAddress(BaseModel):
    r"""Success"""

    object: Annotated[EmailAddressObject, PlainValidator(validate_open_enum(False))]
    r"""String representing the object's type. Objects of the same type share the same value.

    """

    email_address: str

    reserved: bool

    verification: Nullable[Verification]

    linked_to: List[IdentificationLink]

    created_at: int
    r"""Unix timestamp of creation

    """

    updated_at: int
    r"""Unix timestamp of creation

    """

    id: Optional[str] = None

    matches_sso_connection: Optional[bool] = None
    r"""Indicates whether this email address domain matches an active enterprise connection.

    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["id", "matches_sso_connection"]
        nullable_fields = ["verification"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
