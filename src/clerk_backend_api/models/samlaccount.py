"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api import utils
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from clerk_backend_api.utils import get_discriminator, validate_open_enum
from enum import Enum
import pydantic
from pydantic import Discriminator, Tag, model_serializer
from pydantic.functional_validators import PlainValidator
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class SAMLAccountObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value."""

    SAML_ACCOUNT = "saml_account"


class VerificationTicketVerificationSAMLAccountObject(str, Enum):
    VERIFICATION_TICKET = "verification_ticket"


class VerificationTicketVerificationSAMLAccountStatus(str, Enum):
    UNVERIFIED = "unverified"
    VERIFIED = "verified"
    EXPIRED = "expired"


class VerificationTicketVerificationSAMLAccountStrategy(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    TICKET = "ticket"


class VerificationTicketTypedDict(TypedDict):
    status: VerificationTicketVerificationSAMLAccountStatus
    strategy: VerificationTicketVerificationSAMLAccountStrategy
    attempts: Nullable[int]
    expire_at: Nullable[int]
    object: NotRequired[VerificationTicketVerificationSAMLAccountObject]
    verified_at_client: NotRequired[Nullable[str]]


class VerificationTicket(BaseModel):
    status: VerificationTicketVerificationSAMLAccountStatus

    strategy: Annotated[
        VerificationTicketVerificationSAMLAccountStrategy,
        PlainValidator(validate_open_enum(False)),
    ]

    attempts: Nullable[int]

    expire_at: Nullable[int]

    object: Optional[VerificationTicketVerificationSAMLAccountObject] = None

    verified_at_client: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["object", "verified_at_client"]
        nullable_fields = ["attempts", "expire_at", "verified_at_client"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class VerificationSAMLVerificationSAMLAccountObject(str, Enum):
    VERIFICATION_SAML = "verification_saml"


class VerificationSAMLVerificationSAMLAccountStatus(str, Enum):
    UNVERIFIED = "unverified"
    VERIFIED = "verified"
    FAILED = "failed"
    EXPIRED = "expired"
    TRANSFERABLE = "transferable"


class VerificationSAMLVerificationSAMLAccountStrategy(str, Enum):
    SAML = "saml"


class ClerkErrorErrorSAMLAccountMetaTypedDict(TypedDict):
    pass


class ClerkErrorErrorSAMLAccountMeta(BaseModel):
    pass


class VerificationSAMLErrorSAMLAccountClerkErrorTypedDict(TypedDict):
    message: str
    long_message: str
    code: str
    meta: NotRequired[ClerkErrorErrorSAMLAccountMetaTypedDict]
    clerk_trace_id: NotRequired[str]


class VerificationSAMLErrorSAMLAccountClerkError(BaseModel):
    message: str

    long_message: str

    code: str

    meta: Optional[ClerkErrorErrorSAMLAccountMeta] = None

    clerk_trace_id: Optional[str] = None


VerificationSamlVerificationErrorTypedDict = (
    VerificationSAMLErrorSAMLAccountClerkErrorTypedDict
)


VerificationSamlVerificationError = VerificationSAMLErrorSAMLAccountClerkError


class VerificationSAMLTypedDict(TypedDict):
    status: VerificationSAMLVerificationSAMLAccountStatus
    strategy: VerificationSAMLVerificationSAMLAccountStrategy
    attempts: Nullable[int]
    object: NotRequired[VerificationSAMLVerificationSAMLAccountObject]
    external_verification_redirect_url: NotRequired[Nullable[str]]
    error: NotRequired[Nullable[VerificationSamlVerificationErrorTypedDict]]
    expire_at: NotRequired[Nullable[int]]
    verified_at_client: NotRequired[Nullable[str]]


class VerificationSAML(BaseModel):
    status: VerificationSAMLVerificationSAMLAccountStatus

    strategy: VerificationSAMLVerificationSAMLAccountStrategy

    attempts: Nullable[int]

    object: Optional[VerificationSAMLVerificationSAMLAccountObject] = None

    external_verification_redirect_url: OptionalNullable[str] = UNSET

    error: OptionalNullable[VerificationSamlVerificationError] = UNSET

    expire_at: OptionalNullable[int] = UNSET

    verified_at_client: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "object",
            "external_verification_redirect_url",
            "error",
            "expire_at",
            "verified_at_client",
        ]
        nullable_fields = [
            "external_verification_redirect_url",
            "error",
            "expire_at",
            "attempts",
            "verified_at_client",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


SAMLAccountVerificationTypedDict = TypeAliasType(
    "SAMLAccountVerificationTypedDict",
    Union[VerificationTicketTypedDict, VerificationSAMLTypedDict],
)


SAMLAccountVerification = Annotated[
    Union[
        Annotated[VerificationSAML, Tag("verification_saml")],
        Annotated[VerificationTicket, Tag("verification_ticket")],
    ],
    Discriminator(lambda m: get_discriminator(m, "object", "object")),
]


class SAMLConnection2TypedDict(TypedDict):
    id: str
    name: str
    domains: List[str]
    active: bool
    provider: str
    sync_user_attributes: bool
    created_at: int
    r"""Unix timestamp of creation.

    """
    updated_at: int
    r"""Unix timestamp of last update.

    """
    domain: NotRequired[str]
    allow_subdomains: NotRequired[bool]
    allow_idp_initiated: NotRequired[bool]
    disable_additional_identifications: NotRequired[bool]


class SAMLConnection2(BaseModel):
    id: str

    name: str

    domains: List[str]

    active: bool

    provider: str

    sync_user_attributes: bool

    created_at: int
    r"""Unix timestamp of creation.

    """

    updated_at: int
    r"""Unix timestamp of last update.

    """

    domain: Annotated[
        Optional[str],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None

    allow_subdomains: Optional[bool] = None

    allow_idp_initiated: Optional[bool] = None

    disable_additional_identifications: Optional[bool] = None


class SAMLConnection1TypedDict(TypedDict):
    id: str
    name: str
    domain: str
    active: bool
    provider: str
    sync_user_attributes: bool
    created_at: int
    r"""Unix timestamp of creation.

    """
    updated_at: int
    r"""Unix timestamp of last update.

    """
    domains: NotRequired[List[str]]
    allow_subdomains: NotRequired[bool]
    allow_idp_initiated: NotRequired[bool]
    disable_additional_identifications: NotRequired[bool]


class SAMLConnection1(BaseModel):
    id: str

    name: str

    domain: Annotated[
        str,
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ]

    active: bool

    provider: str

    sync_user_attributes: bool

    created_at: int
    r"""Unix timestamp of creation.

    """

    updated_at: int
    r"""Unix timestamp of last update.

    """

    domains: Optional[List[str]] = None

    allow_subdomains: Optional[bool] = None

    allow_idp_initiated: Optional[bool] = None

    disable_additional_identifications: Optional[bool] = None


SAMLConnectionSAMLConnectionTypedDict = TypeAliasType(
    "SAMLConnectionSAMLConnectionTypedDict",
    Union[SAMLConnection1TypedDict, SAMLConnection2TypedDict],
)


SAMLConnectionSAMLConnection = TypeAliasType(
    "SAMLConnectionSAMLConnection", Union[SAMLConnection1, SAMLConnection2]
)


SamlConnectionTypedDict = SAMLConnectionSAMLConnectionTypedDict


SamlConnection = SAMLConnectionSAMLConnection


class SAMLAccountTypedDict(TypedDict):
    id: str
    object: SAMLAccountObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    provider: str
    active: bool
    email_address: str
    verification: Nullable[SAMLAccountVerificationTypedDict]
    first_name: NotRequired[Nullable[str]]
    last_name: NotRequired[Nullable[str]]
    provider_user_id: NotRequired[Nullable[str]]
    public_metadata: NotRequired[Dict[str, Any]]
    saml_connection: NotRequired[Nullable[SamlConnectionTypedDict]]


class SAMLAccount(BaseModel):
    id: str

    object: SAMLAccountObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """

    provider: str

    active: bool

    email_address: str

    verification: Nullable[SAMLAccountVerification]

    first_name: OptionalNullable[str] = UNSET

    last_name: OptionalNullable[str] = UNSET

    provider_user_id: OptionalNullable[str] = UNSET

    public_metadata: Optional[Dict[str, Any]] = None

    saml_connection: OptionalNullable[SamlConnection] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "first_name",
            "last_name",
            "provider_user_id",
            "public_metadata",
            "saml_connection",
        ]
        nullable_fields = [
            "first_name",
            "last_name",
            "provider_user_id",
            "verification",
            "saml_connection",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
