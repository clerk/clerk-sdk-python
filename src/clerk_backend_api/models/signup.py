"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .signupverifications import SignUpVerifications, SignUpVerificationsTypedDict
from clerk_backend_api.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict, deprecated


class SignUpObject(str, Enum):
    SIGN_UP_ATTEMPT = "sign_up_attempt"


class SignUpStatus(str, Enum):
    MISSING_REQUIREMENTS = "missing_requirements"
    COMPLETE = "complete"
    ABANDONED = "abandoned"


@deprecated(
    "warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
)
class SignUpExternalAccountTypedDict(TypedDict):
    pass


@deprecated(
    "warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
)
class SignUpExternalAccount(BaseModel):
    pass


class SignUpTypedDict(TypedDict):
    r"""Success"""

    object: SignUpObject
    id: str
    status: SignUpStatus
    required_fields: List[str]
    optional_fields: List[str]
    missing_fields: List[str]
    unverified_fields: List[str]
    verifications: SignUpVerificationsTypedDict
    username: Nullable[str]
    email_address: Nullable[str]
    phone_number: Nullable[str]
    web3_wallet: Nullable[str]
    password_enabled: bool
    first_name: Nullable[str]
    last_name: Nullable[str]
    custom_action: bool
    external_id: Nullable[str]
    created_session_id: Nullable[str]
    created_user_id: Nullable[str]
    abandon_at: int
    r"""Unix timestamp at which the user abandoned the sign up attempt.

    """
    legal_accepted_at: Nullable[int]
    r"""Unix timestamp at which the user accepted the legal requirements.

    """
    unsafe_metadata: NotRequired[Dict[str, Any]]
    public_metadata: NotRequired[Dict[str, Any]]
    external_account: NotRequired[SignUpExternalAccountTypedDict]


class SignUp(BaseModel):
    r"""Success"""

    object: SignUpObject

    id: str

    status: SignUpStatus

    required_fields: List[str]

    optional_fields: List[str]

    missing_fields: List[str]

    unverified_fields: List[str]

    verifications: SignUpVerifications

    username: Nullable[str]

    email_address: Nullable[str]

    phone_number: Nullable[str]

    web3_wallet: Nullable[str]

    password_enabled: bool

    first_name: Nullable[str]

    last_name: Nullable[str]

    custom_action: bool

    external_id: Nullable[str]

    created_session_id: Nullable[str]

    created_user_id: Nullable[str]

    abandon_at: int
    r"""Unix timestamp at which the user abandoned the sign up attempt.

    """

    legal_accepted_at: Nullable[int]
    r"""Unix timestamp at which the user accepted the legal requirements.

    """

    unsafe_metadata: Optional[Dict[str, Any]] = None

    public_metadata: Optional[Dict[str, Any]] = None

    external_account: Annotated[
        Optional[SignUpExternalAccount],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["unsafe_metadata", "public_metadata", "external_account"]
        nullable_fields = [
            "username",
            "email_address",
            "phone_number",
            "web3_wallet",
            "first_name",
            "last_name",
            "external_id",
            "created_session_id",
            "created_user_id",
            "legal_accepted_at",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
