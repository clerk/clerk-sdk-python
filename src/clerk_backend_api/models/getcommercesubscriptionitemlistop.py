"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import BaseModel
from clerk_backend_api.utils import FieldMetadata, QueryParamMetadata
from enum import Enum
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetCommerceSubscriptionItemListQueryParamStatus(str, Enum):
    r"""Filter subscription items by status"""

    ACTIVE = "active"
    ENDED = "ended"
    PAST_DUE = "past_due"
    UPCOMING = "upcoming"
    FREE_TRIAL = "free_trial"


class QueryParamPayerType(str, Enum):
    r"""Filter subscription items by payer type"""

    USER = "user"
    ORG = "org"


class GetCommerceSubscriptionItemListRequestTypedDict(TypedDict):
    paginated: NotRequired[bool]
    r"""Whether to paginate the results.
    If true, the results will be paginated.
    If false, the results will not be paginated.
    """
    limit: NotRequired[int]
    r"""Applies a limit to the number of results returned.
    Can be used for paginating the results together with `offset`.
    """
    offset: NotRequired[int]
    r"""Skip the first `offset` results when paginating.
    Needs to be an integer greater or equal to zero.
    To be used in conjunction with `limit`.
    """
    status: NotRequired[GetCommerceSubscriptionItemListQueryParamStatus]
    r"""Filter subscription items by status"""
    payer_type: NotRequired[QueryParamPayerType]
    r"""Filter subscription items by payer type"""
    plan_id: NotRequired[str]
    r"""Filter subscription items by plan ID"""
    include_free: NotRequired[bool]
    r"""Whether to include free plan subscription items"""
    query: NotRequired[str]
    r"""Search query to filter subscription items"""


class GetCommerceSubscriptionItemListRequest(BaseModel):
    paginated: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Whether to paginate the results.
    If true, the results will be paginated.
    If false, the results will not be paginated.
    """

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 10
    r"""Applies a limit to the number of results returned.
    Can be used for paginating the results together with `offset`.
    """

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""Skip the first `offset` results when paginating.
    Needs to be an integer greater or equal to zero.
    To be used in conjunction with `limit`.
    """

    status: Annotated[
        Optional[GetCommerceSubscriptionItemListQueryParamStatus],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter subscription items by status"""

    payer_type: Annotated[
        Optional[QueryParamPayerType],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter subscription items by payer type"""

    plan_id: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter subscription items by plan ID"""

    include_free: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""Whether to include free plan subscription items"""

    query: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Search query to filter subscription items"""
