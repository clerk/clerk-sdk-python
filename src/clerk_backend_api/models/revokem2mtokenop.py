"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.models import ClerkBaseError
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from clerk_backend_api.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from enum import Enum
import httpx
from pydantic import model_serializer
from typing import Any, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class RevokeM2MTokenRequestBodyTypedDict(TypedDict):
    revocation_reason: NotRequired[Nullable[str]]


class RevokeM2MTokenRequestBody(BaseModel):
    revocation_reason: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["revocation_reason"]
        nullable_fields = ["revocation_reason"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RevokeM2MTokenRequestTypedDict(TypedDict):
    m2m_token_id: str
    request_body: RevokeM2MTokenRequestBodyTypedDict


class RevokeM2MTokenRequest(BaseModel):
    m2m_token_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    request_body: Annotated[
        RevokeM2MTokenRequestBody,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]


class RevokeM2MTokenM2mErrorsTypedDict(TypedDict):
    message: str
    long_message: str
    code: str


class RevokeM2MTokenM2mErrors(BaseModel):
    message: str

    long_message: str

    code: str


class RevokeM2MTokenM2mResponseResponseBodyData(BaseModel):
    errors: List[RevokeM2MTokenM2mErrors]


class RevokeM2MTokenM2mResponseResponseBody(ClerkBaseError):
    r"""404 Not Found"""

    data: RevokeM2MTokenM2mResponseResponseBodyData

    def __init__(
        self,
        data: RevokeM2MTokenM2mResponseResponseBodyData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class RevokeM2MTokenErrorsTypedDict(TypedDict):
    message: str
    long_message: str
    code: str


class RevokeM2MTokenErrors(BaseModel):
    message: str

    long_message: str

    code: str


class RevokeM2MTokenM2mResponseBodyData(BaseModel):
    errors: List[RevokeM2MTokenErrors]


class RevokeM2MTokenM2mResponseBody(ClerkBaseError):
    r"""400 Bad Request"""

    data: RevokeM2MTokenM2mResponseBodyData

    def __init__(
        self,
        data: RevokeM2MTokenM2mResponseBodyData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class RevokeM2MTokenObject(str, Enum):
    MACHINE_TO_MACHINE_TOKEN = "machine_to_machine_token"


class RevokeM2MTokenResponseBodyTypedDict(TypedDict):
    r"""200 OK"""

    object: RevokeM2MTokenObject
    id: str
    subject: str
    revoked: bool
    revocation_reason: Nullable[str]
    expired: bool
    expiration: Nullable[float]
    last_used_at: Nullable[float]
    created_at: float
    updated_at: float
    claims: NotRequired[Nullable[Any]]
    scopes: NotRequired[List[str]]


class RevokeM2MTokenResponseBody(BaseModel):
    r"""200 OK"""

    object: RevokeM2MTokenObject

    id: str

    subject: str

    revoked: bool

    revocation_reason: Nullable[str]

    expired: bool

    expiration: Nullable[float]

    last_used_at: Nullable[float]

    created_at: float

    updated_at: float

    claims: OptionalNullable[Any] = UNSET

    scopes: Optional[List[str]] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["claims", "scopes"]
        nullable_fields = ["claims", "revocation_reason", "expiration", "last_used_at"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
