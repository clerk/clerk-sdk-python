"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import List
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateOAuthApplicationRequestBodyTypedDict(TypedDict):
    name: str
    r"""The name of the new OAuth application"""
    redirect_uris: NotRequired[Nullable[List[str]]]
    r"""An array of redirect URIs of the new OAuth application"""
    callback_url: NotRequired[Nullable[str]]
    r"""The callback URL of the new OAuth application"""
    scopes: NotRequired[Nullable[str]]
    r"""Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces."""
    public: NotRequired[Nullable[bool]]
    r"""If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow."""


class CreateOAuthApplicationRequestBody(BaseModel):
    name: str
    r"""The name of the new OAuth application"""

    redirect_uris: OptionalNullable[List[str]] = UNSET
    r"""An array of redirect URIs of the new OAuth application"""

    callback_url: Annotated[
        OptionalNullable[str],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = UNSET
    r"""The callback URL of the new OAuth application"""

    scopes: OptionalNullable[str] = "profile email"
    r"""Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces."""

    public: OptionalNullable[bool] = UNSET
    r"""If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["redirect_uris", "callback_url", "scopes", "public"]
        nullable_fields = ["redirect_uris", "callback_url", "scopes", "public"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
