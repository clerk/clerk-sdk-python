"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET_SENTINEL,
)
from clerk_backend_api.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class InviteWaitlistEntryRequestBodyTypedDict(TypedDict):
    ignore_existing: NotRequired[Nullable[bool]]
    r"""Whether an invitation should be created if there is already an existing invitation for this email address, or it's claimed by another user."""


class InviteWaitlistEntryRequestBody(BaseModel):
    ignore_existing: OptionalNullable[bool] = False
    r"""Whether an invitation should be created if there is already an existing invitation for this email address, or it's claimed by another user."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["ignore_existing"]
        nullable_fields = ["ignore_existing"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class InviteWaitlistEntryRequestTypedDict(TypedDict):
    waitlist_entry_id: str
    r"""The ID of the waitlist entry to invite"""
    request_body: NotRequired[InviteWaitlistEntryRequestBodyTypedDict]


class InviteWaitlistEntryRequest(BaseModel):
    waitlist_entry_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The ID of the waitlist entry to invite"""

    request_body: Annotated[
        Optional[InviteWaitlistEntryRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None
