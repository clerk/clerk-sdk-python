"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class PasskeyObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value."""

    PASSKEY = "passkey"


class VerificationPasskeyVerificationObject(str, Enum):
    VERIFICATION_PASSKEY = "verification_passkey"


class VerificationPasskeyVerificationStatus(str, Enum):
    VERIFIED = "verified"


class VerificationPasskeyVerificationStrategy(str, Enum):
    PASSKEY = "passkey"


class Nonce(str, Enum):
    NONCE = "nonce"


class VerificationPasskeyTypedDict(TypedDict):
    status: VerificationPasskeyVerificationStatus
    strategy: VerificationPasskeyVerificationStrategy
    attempts: Nullable[int]
    expire_at: Nullable[int]
    object: NotRequired[VerificationPasskeyVerificationObject]
    nonce: NotRequired[Nonce]
    message: NotRequired[Nullable[str]]
    verified_at_client: NotRequired[Nullable[str]]


class VerificationPasskey(BaseModel):
    status: VerificationPasskeyVerificationStatus

    strategy: VerificationPasskeyVerificationStrategy

    attempts: Nullable[int]

    expire_at: Nullable[int]

    object: Optional[VerificationPasskeyVerificationObject] = None

    nonce: Optional[Nonce] = None

    message: OptionalNullable[str] = UNSET

    verified_at_client: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["object", "nonce", "message", "verified_at_client"]
        nullable_fields = ["message", "attempts", "expire_at", "verified_at_client"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


PasskeyVerificationTypedDict = VerificationPasskeyTypedDict


PasskeyVerification = VerificationPasskey


class PasskeyTypedDict(TypedDict):
    object: PasskeyObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    name: str
    last_used_at: int
    r"""Unix timestamp of when the passkey was last used.

    """
    verification: Nullable[PasskeyVerificationTypedDict]
    id: NotRequired[str]


class Passkey(BaseModel):
    object: PasskeyObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """

    name: str

    last_used_at: int
    r"""Unix timestamp of when the passkey was last used.

    """

    verification: Nullable[PasskeyVerification]

    id: Optional[str] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["id"]
        nullable_fields = ["verification"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
