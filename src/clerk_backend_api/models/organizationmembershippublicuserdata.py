"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, NotRequired, TypedDict


class OrganizationMembershipPublicUserDataTypedDict(TypedDict):
    r"""An organization membership with public user data populated"""

    user_id: str
    first_name: Nullable[str]
    last_name: Nullable[str]
    profile_image_url: Nullable[str]
    image_url: str
    has_image: bool
    identifier: NotRequired[Nullable[str]]


class OrganizationMembershipPublicUserData(BaseModel):
    r"""An organization membership with public user data populated"""

    user_id: str

    first_name: Nullable[str]

    last_name: Nullable[str]

    profile_image_url: Annotated[
        Nullable[str],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ]

    image_url: str

    has_image: bool

    identifier: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["identifier"]
        nullable_fields = ["first_name", "last_name", "profile_image_url", "identifier"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
