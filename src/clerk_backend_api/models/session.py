"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from enum import Enum
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import NotRequired


class SessionObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    SESSION = "session"

class ActorTypedDict(TypedDict):
    pass
    

class Actor(BaseModel):
    pass
    

class Status(str, Enum):
    ACTIVE = "active"
    REVOKED = "revoked"
    ENDED = "ended"
    EXPIRED = "expired"
    REMOVED = "removed"
    ABANDONED = "abandoned"
    REPLACED = "replaced"

class LatestActivityTypedDict(TypedDict):
    object: str
    id: str
    device_type: NotRequired[str]
    is_mobile: NotRequired[bool]
    browser_name: NotRequired[str]
    browser_version: NotRequired[str]
    ip_address: NotRequired[str]
    city: NotRequired[str]
    country: NotRequired[str]
    

class LatestActivity(BaseModel):
    object: str
    id: str
    device_type: Optional[str] = None
    is_mobile: Optional[bool] = None
    browser_name: Optional[str] = None
    browser_version: Optional[str] = None
    ip_address: Optional[str] = None
    city: Optional[str] = None
    country: Optional[str] = None
    

class SessionTypedDict(TypedDict):
    object: SessionObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    id: str
    user_id: str
    client_id: str
    status: Status
    last_active_at: int
    expire_at: int
    abandon_at: int
    updated_at: int
    r"""Unix timestamp of last update.

    """
    created_at: int
    r"""Unix timestamp of creation.

    """
    actor: NotRequired[Nullable[ActorTypedDict]]
    last_active_organization_id: NotRequired[Nullable[str]]
    latest_activity: NotRequired[Nullable[LatestActivityTypedDict]]
    

class Session(BaseModel):
    object: SessionObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    id: str
    user_id: str
    client_id: str
    status: Status
    last_active_at: int
    expire_at: int
    abandon_at: int
    updated_at: int
    r"""Unix timestamp of last update.

    """
    created_at: int
    r"""Unix timestamp of creation.

    """
    actor: OptionalNullable[Actor] = UNSET
    last_active_organization_id: OptionalNullable[str] = UNSET
    latest_activity: OptionalNullable[LatestActivity] = UNSET
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["actor", "last_active_organization_id", "latest_activity"]
        nullable_fields = ["actor", "last_active_organization_id", "latest_activity"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
