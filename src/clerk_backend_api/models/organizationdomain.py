"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
from pydantic import model_serializer
from typing_extensions import TypedDict


class OrganizationDomainObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value. Always `organization_domain`"""

    ORGANIZATION_DOMAIN = "organization_domain"


class EnrollmentMode(str, Enum):
    r"""Mode of enrollment for the domain"""

    MANUAL_INVITATION = "manual_invitation"
    AUTOMATIC_INVITATION = "automatic_invitation"
    AUTOMATIC_SUGGESTION = "automatic_suggestion"


class OrganizationDomainStatus(str, Enum):
    r"""Status of the verification. It can be `unverified` or `verified`"""

    UNVERIFIED = "unverified"
    VERIFIED = "verified"


class OrganizationDomainVerificationTypedDict(TypedDict):
    r"""Verification details for the domain"""

    status: OrganizationDomainStatus
    r"""Status of the verification. It can be `unverified` or `verified`"""
    strategy: str
    r"""Name of the strategy used to verify the domain"""
    attempts: Nullable[int]
    r"""How many attempts have been made to verify the domain"""
    expire_at: Nullable[int]
    r"""Unix timestamp of when the verification will expire"""


class OrganizationDomainVerification(BaseModel):
    r"""Verification details for the domain"""

    status: OrganizationDomainStatus
    r"""Status of the verification. It can be `unverified` or `verified`"""

    strategy: str
    r"""Name of the strategy used to verify the domain"""

    attempts: Nullable[int]
    r"""How many attempts have been made to verify the domain"""

    expire_at: Nullable[int]
    r"""Unix timestamp of when the verification will expire"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["attempts", "expire_at"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class OrganizationDomainTypedDict(TypedDict):
    r"""An organization domain"""

    object: OrganizationDomainObject
    r"""String representing the object's type. Objects of the same type share the same value. Always `organization_domain`

    """
    id: str
    r"""Unique identifier for the organization domain"""
    organization_id: str
    r"""Unique identifier for the organization"""
    name: str
    r"""Name of the organization domain"""
    enrollment_mode: EnrollmentMode
    r"""Mode of enrollment for the domain"""
    affiliation_email_address: Nullable[str]
    r"""Affiliation email address for the domain, if available."""
    verification: Nullable[OrganizationDomainVerificationTypedDict]
    r"""Verification details for the domain"""
    total_pending_invitations: int
    r"""Total number of pending invitations associated with this domain"""
    total_pending_suggestions: int
    r"""Total number of pending suggestions associated with this domain"""
    created_at: int
    r"""Unix timestamp when the domain was created"""
    updated_at: int
    r"""Unix timestamp of the last update to the domain"""


class OrganizationDomain(BaseModel):
    r"""An organization domain"""

    object: OrganizationDomainObject
    r"""String representing the object's type. Objects of the same type share the same value. Always `organization_domain`

    """

    id: str
    r"""Unique identifier for the organization domain"""

    organization_id: str
    r"""Unique identifier for the organization"""

    name: str
    r"""Name of the organization domain"""

    enrollment_mode: EnrollmentMode
    r"""Mode of enrollment for the domain"""

    affiliation_email_address: Nullable[str]
    r"""Affiliation email address for the domain, if available."""

    verification: Nullable[OrganizationDomainVerification]
    r"""Verification details for the domain"""

    total_pending_invitations: int
    r"""Total number of pending invitations associated with this domain"""

    total_pending_suggestions: int
    r"""Total number of pending suggestions associated with this domain"""

    created_at: int
    r"""Unix timestamp when the domain was created"""

    updated_at: int
    r"""Unix timestamp of the last update to the domain"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["affiliation_email_address", "verification"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
