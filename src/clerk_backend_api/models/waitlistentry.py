"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
from pydantic import model_serializer
from typing import Any, Dict, Optional
from typing_extensions import NotRequired, TypedDict


class WaitlistEntryObject(str, Enum):
    WAITLIST_ENTRY = "waitlist_entry"


class WaitlistEntryStatus(str, Enum):
    PENDING = "pending"
    INVITED = "invited"
    REJECTED = "rejected"
    COMPLETED = "completed"


class WaitlistEntryInvitationObject(str, Enum):
    INVITATION = "invitation"


class WaitlistEntryInvitationStatus(str, Enum):
    PENDING = "pending"
    ACCEPTED = "accepted"
    REVOKED = "revoked"
    EXPIRED = "expired"


class WaitlistEntryInvitationTypedDict(TypedDict):
    object: WaitlistEntryInvitationObject
    id: str
    email_address: str
    public_metadata: Dict[str, Any]
    status: WaitlistEntryInvitationStatus
    created_at: int
    r"""Unix timestamp of creation.

    """
    updated_at: int
    r"""Unix timestamp of last update.

    """
    revoked: NotRequired[bool]
    url: NotRequired[str]
    expires_at: NotRequired[Nullable[int]]
    r"""Unix timestamp of expiration.

    """


class WaitlistEntryInvitation(BaseModel):
    object: WaitlistEntryInvitationObject

    id: str

    email_address: str

    public_metadata: Dict[str, Any]

    status: WaitlistEntryInvitationStatus

    created_at: int
    r"""Unix timestamp of creation.

    """

    updated_at: int
    r"""Unix timestamp of last update.

    """

    revoked: Optional[bool] = None

    url: Optional[str] = None

    expires_at: OptionalNullable[int] = UNSET
    r"""Unix timestamp of expiration.

    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["revoked", "url", "expires_at"]
        nullable_fields = ["expires_at"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class WaitlistEntryTypedDict(TypedDict):
    object: WaitlistEntryObject
    id: str
    email_address: str
    status: WaitlistEntryStatus
    created_at: int
    r"""Unix timestamp of creation.

    """
    updated_at: int
    r"""Unix timestamp of last update.

    """
    is_locked: NotRequired[bool]
    r"""Indicates if the waitlist entry is locked. Locked entries are being processed in a batch action and are unavailable for other actions.

    """
    invitation: NotRequired[Nullable[WaitlistEntryInvitationTypedDict]]


class WaitlistEntry(BaseModel):
    object: WaitlistEntryObject

    id: str

    email_address: str

    status: WaitlistEntryStatus

    created_at: int
    r"""Unix timestamp of creation.

    """

    updated_at: int
    r"""Unix timestamp of last update.

    """

    is_locked: Optional[bool] = None
    r"""Indicates if the waitlist entry is locked. Locked entries are being processed in a batch action and are unavailable for other actions.

    """

    invitation: OptionalNullable[WaitlistEntryInvitation] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["is_locked", "invitation"]
        nullable_fields = ["invitation"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
