"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api import utils
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from clerk_backend_api.utils import get_discriminator, validate_open_enum
from enum import Enum
import pydantic
from pydantic import ConfigDict, Discriminator, Tag, model_serializer
from pydantic.functional_validators import PlainValidator
from typing import Any, Dict, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class ExternalAccountWithVerificationObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value."""

    EXTERNAL_ACCOUNT = "external_account"
    FACEBOOK_ACCOUNT = "facebook_account"
    GOOGLE_ACCOUNT = "google_account"


class VerificationGoogleOneTapVerificationObject(str, Enum):
    VERIFICATION_GOOGLE_ONE_TAP = "verification_google_one_tap"


class VerificationGoogleOneTapVerificationStatus(str, Enum):
    UNVERIFIED = "unverified"
    VERIFIED = "verified"


class VerificationGoogleOneTapVerificationStrategy(str, Enum):
    GOOGLE_ONE_TAP = "google_one_tap"


class ClerkErrorErrorExternalAccountWithVerificationVerificationMetaTypedDict(
    TypedDict
):
    pass


class ClerkErrorErrorExternalAccountWithVerificationVerificationMeta(BaseModel):
    pass


class VerificationGoogleOneTapErrorClerkErrorTypedDict(TypedDict):
    message: str
    long_message: str
    code: str
    meta: NotRequired[
        ClerkErrorErrorExternalAccountWithVerificationVerificationMetaTypedDict
    ]
    clerk_trace_id: NotRequired[str]


class VerificationGoogleOneTapErrorClerkError(BaseModel):
    message: str

    long_message: str

    code: str

    meta: Optional[ClerkErrorErrorExternalAccountWithVerificationVerificationMeta] = (
        None
    )

    clerk_trace_id: Optional[str] = None


VerificationGoogleOneTapVerificationErrorTypedDict = (
    VerificationGoogleOneTapErrorClerkErrorTypedDict
)


VerificationGoogleOneTapVerificationError = VerificationGoogleOneTapErrorClerkError


class GoogleOneTapTypedDict(TypedDict):
    status: VerificationGoogleOneTapVerificationStatus
    strategy: VerificationGoogleOneTapVerificationStrategy
    expire_at: Nullable[int]
    attempts: Nullable[int]
    object: NotRequired[VerificationGoogleOneTapVerificationObject]
    verified_at_client: NotRequired[Nullable[str]]
    error: NotRequired[Nullable[VerificationGoogleOneTapVerificationErrorTypedDict]]


class GoogleOneTap(BaseModel):
    status: VerificationGoogleOneTapVerificationStatus

    strategy: VerificationGoogleOneTapVerificationStrategy

    expire_at: Nullable[int]

    attempts: Nullable[int]

    object: Optional[VerificationGoogleOneTapVerificationObject] = None

    verified_at_client: OptionalNullable[str] = UNSET

    error: OptionalNullable[VerificationGoogleOneTapVerificationError] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["object", "verified_at_client", "error"]
        nullable_fields = ["expire_at", "attempts", "verified_at_client", "error"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class VerificationOauthVerificationObject(str, Enum):
    VERIFICATION_OAUTH = "verification_oauth"


class VerificationOauthVerificationStatus(str, Enum, metaclass=utils.OpenEnumMeta):
    UNVERIFIED = "unverified"
    VERIFIED = "verified"
    FAILED = "failed"
    EXPIRED = "expired"
    TRANSFERABLE = "transferable"


class ClerkErrorErrorExternalAccountWithVerificationMetaTypedDict(TypedDict):
    pass


class ClerkErrorErrorExternalAccountWithVerificationMeta(BaseModel):
    pass


class VerificationOauthErrorClerkErrorTypedDict(TypedDict):
    message: str
    long_message: str
    code: str
    meta: NotRequired[ClerkErrorErrorExternalAccountWithVerificationMetaTypedDict]
    clerk_trace_id: NotRequired[str]


class VerificationOauthErrorClerkError(BaseModel):
    message: str

    long_message: str

    code: str

    meta: Optional[ClerkErrorErrorExternalAccountWithVerificationMeta] = None

    clerk_trace_id: Optional[str] = None


VerificationOauthVerificationErrorTypedDict = VerificationOauthErrorClerkErrorTypedDict


VerificationOauthVerificationError = VerificationOauthErrorClerkError


class OauthTypedDict(TypedDict):
    status: VerificationOauthVerificationStatus
    strategy: str
    expire_at: int
    attempts: Nullable[int]
    object: NotRequired[VerificationOauthVerificationObject]
    external_verification_redirect_url: NotRequired[str]
    error: NotRequired[Nullable[VerificationOauthVerificationErrorTypedDict]]
    verified_at_client: NotRequired[Nullable[str]]


class Oauth(BaseModel):
    status: Annotated[
        VerificationOauthVerificationStatus, PlainValidator(validate_open_enum(False))
    ]

    strategy: str

    expire_at: int

    attempts: Nullable[int]

    object: Optional[VerificationOauthVerificationObject] = None

    external_verification_redirect_url: Optional[str] = None

    error: OptionalNullable[VerificationOauthVerificationError] = UNSET

    verified_at_client: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "object",
            "external_verification_redirect_url",
            "error",
            "verified_at_client",
        ]
        nullable_fields = ["error", "attempts", "verified_at_client"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


ExternalAccountWithVerificationVerificationTypedDict = TypeAliasType(
    "ExternalAccountWithVerificationVerificationTypedDict",
    Union[GoogleOneTapTypedDict, OauthTypedDict],
)


ExternalAccountWithVerificationVerification = Annotated[
    Union[
        Annotated[Oauth, Tag("verification_oauth")],
        Annotated[GoogleOneTap, Tag("verification_google_one_tap")],
    ],
    Discriminator(lambda m: get_discriminator(m, "object", "object")),
]


class ExternalAccountWithVerificationTypedDict(TypedDict):
    object: ExternalAccountWithVerificationObject
    r"""String representing the object's type. Objects of the same type share the same value."""
    id: str
    provider: str
    identification_id: str
    provider_user_id: str
    r"""The unique ID of the user in the external provider's system"""
    approved_scopes: str
    email_address: str
    first_name: str
    last_name: str
    public_metadata: Dict[str, Any]
    created_at: int
    r"""Unix timestamp of creation

    """
    updated_at: int
    r"""Unix timestamp of creation

    """
    verification: Nullable[ExternalAccountWithVerificationVerificationTypedDict]
    avatar_url: NotRequired[str]
    r"""Please use `image_url` instead"""
    image_url: NotRequired[Nullable[str]]
    username: NotRequired[Nullable[str]]
    phone_number: NotRequired[Nullable[str]]
    label: NotRequired[Nullable[str]]


class ExternalAccountWithVerification(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    object: ExternalAccountWithVerificationObject
    r"""String representing the object's type. Objects of the same type share the same value."""

    id: str

    provider: str

    identification_id: str

    provider_user_id: str
    r"""The unique ID of the user in the external provider's system"""

    approved_scopes: str

    email_address: str

    first_name: str

    last_name: str

    public_metadata: Dict[str, Any]

    created_at: int
    r"""Unix timestamp of creation

    """

    updated_at: int
    r"""Unix timestamp of creation

    """

    verification: Nullable[ExternalAccountWithVerificationVerification]

    avatar_url: Annotated[
        Optional[str],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None
    r"""Please use `image_url` instead"""

    image_url: OptionalNullable[str] = UNSET

    username: OptionalNullable[str] = UNSET

    phone_number: OptionalNullable[str] = UNSET

    label: OptionalNullable[str] = UNSET

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "avatar_url",
            "image_url",
            "username",
            "phone_number",
            "label",
        ]
        nullable_fields = [
            "image_url",
            "username",
            "phone_number",
            "label",
            "verification",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        for k, v in serialized.items():
            m[k] = v

        return m
