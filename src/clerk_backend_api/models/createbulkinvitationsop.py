"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
from pydantic import model_serializer
from typing import Any, Dict, Optional
from typing_extensions import NotRequired, TypedDict


class CreateBulkInvitationsTemplateSlug(str, Enum):
    r"""The slug of the email template to use for the invitation email."""

    INVITATION = "invitation"
    WAITLIST_INVITATION = "waitlist_invitation"


class RequestBodyTypedDict(TypedDict):
    email_address: str
    r"""The email address the invitation will be sent to"""
    public_metadata: NotRequired[Nullable[Dict[str, Any]]]
    r"""Metadata that will be attached to the newly created invitation.
    The value of this property should be a well-formed JSON object.
    Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.
    """
    redirect_url: NotRequired[Nullable[str]]
    r"""The URL where the user is redirected upon visiting the invitation link, where they can accept the invitation. Required if you have implemented a [custom flow for handling application invitations](/docs/custom-flows/invitations)."""
    notify: NotRequired[Nullable[bool]]
    r"""Optional flag which denotes whether an email invitation should be sent to the given email address.
    Defaults to true.
    """
    ignore_existing: NotRequired[Nullable[bool]]
    r"""Whether an invitation should be created if there is already an existing invitation for this email
    address, or it's claimed by another user.
    """
    expires_in_days: NotRequired[Nullable[int]]
    r"""The number of days the invitation will be valid for. By default, the invitation expires after 30 days."""
    template_slug: NotRequired[CreateBulkInvitationsTemplateSlug]
    r"""The slug of the email template to use for the invitation email."""


class RequestBody(BaseModel):
    email_address: str
    r"""The email address the invitation will be sent to"""

    public_metadata: OptionalNullable[Dict[str, Any]] = UNSET
    r"""Metadata that will be attached to the newly created invitation.
    The value of this property should be a well-formed JSON object.
    Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.
    """

    redirect_url: OptionalNullable[str] = UNSET
    r"""The URL where the user is redirected upon visiting the invitation link, where they can accept the invitation. Required if you have implemented a [custom flow for handling application invitations](/docs/custom-flows/invitations)."""

    notify: OptionalNullable[bool] = True
    r"""Optional flag which denotes whether an email invitation should be sent to the given email address.
    Defaults to true.
    """

    ignore_existing: OptionalNullable[bool] = False
    r"""Whether an invitation should be created if there is already an existing invitation for this email
    address, or it's claimed by another user.
    """

    expires_in_days: OptionalNullable[int] = UNSET
    r"""The number of days the invitation will be valid for. By default, the invitation expires after 30 days."""

    template_slug: Optional[CreateBulkInvitationsTemplateSlug] = (
        CreateBulkInvitationsTemplateSlug.INVITATION
    )
    r"""The slug of the email template to use for the invitation email."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "public_metadata",
            "redirect_url",
            "notify",
            "ignore_existing",
            "expires_in_days",
            "template_slug",
        ]
        nullable_fields = [
            "public_metadata",
            "redirect_url",
            "notify",
            "ignore_existing",
            "expires_in_days",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
