"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class CreateMachineTokenClaimsTypedDict(TypedDict):
    r"""Claims to include in the JWT"""


class CreateMachineTokenClaims(BaseModel):
    r"""Claims to include in the JWT"""


class CreateMachineTokenRequestBodyTypedDict(TypedDict):
    machine_id: str
    r"""ID of the machine creating the token. Must be be prefixed with `mch_`. Must only contain lowercase letters, numbers, and underscores."""
    claims: NotRequired[Nullable[CreateMachineTokenClaimsTypedDict]]
    r"""Claims to include in the JWT"""
    expires_in_seconds: NotRequired[Nullable[int]]
    r"""Token lifetime in seconds. Defaults to 30 seconds if not specified."""
    allowed_clock_skew: NotRequired[Nullable[int]]
    r"""Allowed clock skew in seconds. Defaults to 5 seconds if not specified."""


class CreateMachineTokenRequestBody(BaseModel):
    machine_id: str
    r"""ID of the machine creating the token. Must be be prefixed with `mch_`. Must only contain lowercase letters, numbers, and underscores."""

    claims: OptionalNullable[CreateMachineTokenClaims] = UNSET
    r"""Claims to include in the JWT"""

    expires_in_seconds: OptionalNullable[int] = UNSET
    r"""Token lifetime in seconds. Defaults to 30 seconds if not specified."""

    allowed_clock_skew: OptionalNullable[int] = 5
    r"""Allowed clock skew in seconds. Defaults to 5 seconds if not specified."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["claims", "expires_in_seconds", "allowed_clock_skew"]
        nullable_fields = ["claims", "expires_in_seconds", "allowed_clock_skew"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
