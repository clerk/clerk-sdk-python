"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.models import ClerkBaseError
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from clerk_backend_api.utils import FieldMetadata, QueryParamMetadata
from enum import Enum
import httpx
from pydantic import model_serializer
from typing import Any, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetM2MTokensRequestTypedDict(TypedDict):
    subject: str
    revoked: NotRequired[Nullable[bool]]
    expired: NotRequired[Nullable[bool]]
    limit: NotRequired[float]
    offset: NotRequired[Nullable[float]]


class GetM2MTokensRequest(BaseModel):
    subject: Annotated[
        str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]

    revoked: Annotated[
        OptionalNullable[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False

    expired: Annotated[
        OptionalNullable[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False

    limit: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 10

    offset: Annotated[
        OptionalNullable[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["revoked", "expired", "limit", "offset"]
        nullable_fields = ["revoked", "expired", "offset"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class GetM2MTokensM2mResponseErrorsTypedDict(TypedDict):
    message: str
    long_message: str
    code: str


class GetM2MTokensM2mResponseErrors(BaseModel):
    message: str

    long_message: str

    code: str


class GetM2MTokensM2mResponse404ResponseBodyData(BaseModel):
    errors: List[GetM2MTokensM2mResponseErrors]


class GetM2MTokensM2mResponse404ResponseBody(ClerkBaseError):
    r"""404 Not Found"""

    data: GetM2MTokensM2mResponse404ResponseBodyData

    def __init__(
        self,
        data: GetM2MTokensM2mResponse404ResponseBodyData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetM2MTokensM2mErrorsTypedDict(TypedDict):
    message: str
    long_message: str
    code: str


class GetM2MTokensM2mErrors(BaseModel):
    message: str

    long_message: str

    code: str


class GetM2MTokensM2mResponseResponseBodyData(BaseModel):
    errors: List[GetM2MTokensM2mErrors]


class GetM2MTokensM2mResponseResponseBody(ClerkBaseError):
    r"""403 Forbidden"""

    data: GetM2MTokensM2mResponseResponseBodyData

    def __init__(
        self,
        data: GetM2MTokensM2mResponseResponseBodyData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetM2MTokensErrorsTypedDict(TypedDict):
    message: str
    long_message: str
    code: str


class GetM2MTokensErrors(BaseModel):
    message: str

    long_message: str

    code: str


class GetM2MTokensM2mResponseBodyData(BaseModel):
    errors: List[GetM2MTokensErrors]


class GetM2MTokensM2mResponseBody(ClerkBaseError):
    r"""400 Bad Request"""

    data: GetM2MTokensM2mResponseBodyData

    def __init__(
        self,
        data: GetM2MTokensM2mResponseBodyData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetM2MTokensObject(str, Enum):
    MACHINE_TO_MACHINE_TOKEN = "machine_to_machine_token"


class M2mTokensTypedDict(TypedDict):
    object: GetM2MTokensObject
    id: str
    subject: str
    revoked: bool
    revocation_reason: Nullable[str]
    expired: bool
    expiration: Nullable[float]
    last_used_at: Nullable[float]
    created_at: float
    updated_at: float
    claims: NotRequired[Nullable[Any]]
    scopes: NotRequired[List[str]]


class M2mTokens(BaseModel):
    object: GetM2MTokensObject

    id: str

    subject: str

    revoked: bool

    revocation_reason: Nullable[str]

    expired: bool

    expiration: Nullable[float]

    last_used_at: Nullable[float]

    created_at: float

    updated_at: float

    claims: OptionalNullable[Any] = UNSET

    scopes: Optional[List[str]] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["claims", "scopes"]
        nullable_fields = ["claims", "revocation_reason", "expiration", "last_used_at"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class GetM2MTokensResponseBodyTypedDict(TypedDict):
    r"""200 OK"""

    m2m_tokens: List[M2mTokensTypedDict]
    total_count: float


class GetM2MTokensResponseBody(BaseModel):
    r"""200 OK"""

    m2m_tokens: List[M2mTokens]

    total_count: float
