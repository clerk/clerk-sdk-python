"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from clerk_backend_api.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from pydantic import model_serializer
from typing import TypedDict
from typing_extensions import Annotated, NotRequired


class UpdateDomainRequestBodyTypedDict(TypedDict):
    name: NotRequired[Nullable[str]]
    r"""The new domain name. For development instances, can contain the port,
    i.e `myhostname:3000`. For production instances, must be a valid FQDN,
    i.e `mysite.com`. Cannot contain protocol scheme.
    """
    proxy_url: NotRequired[Nullable[str]]
    r"""The full URL of the proxy that will forward requests to Clerk's Frontend API.
    Can only be updated for production instances.
    """
    is_secondary: NotRequired[Nullable[bool]]
    r"""Whether this is a domain for a secondary app, meaning that any subdomain provided is significant and
    will be stored as part of the domain. This is useful for supporting multiple apps (one primary and
    multiple secondaries) on the same root domain (eTLD+1).
    """
    

class UpdateDomainRequestBody(BaseModel):
    name: OptionalNullable[str] = UNSET
    r"""The new domain name. For development instances, can contain the port,
    i.e `myhostname:3000`. For production instances, must be a valid FQDN,
    i.e `mysite.com`. Cannot contain protocol scheme.
    """
    proxy_url: OptionalNullable[str] = UNSET
    r"""The full URL of the proxy that will forward requests to Clerk's Frontend API.
    Can only be updated for production instances.
    """
    is_secondary: OptionalNullable[bool] = UNSET
    r"""Whether this is a domain for a secondary app, meaning that any subdomain provided is significant and
    will be stored as part of the domain. This is useful for supporting multiple apps (one primary and
    multiple secondaries) on the same root domain (eTLD+1).
    """
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["name", "proxy_url", "is_secondary"]
        nullable_fields = ["name", "proxy_url", "is_secondary"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class UpdateDomainRequestTypedDict(TypedDict):
    domain_id: str
    r"""The ID of the domain that will be updated."""
    request_body: UpdateDomainRequestBodyTypedDict
    

class UpdateDomainRequest(BaseModel):
    domain_id: Annotated[str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""The ID of the domain that will be updated."""
    request_body: Annotated[UpdateDomainRequestBody, FieldMetadata(request=RequestMetadata(media_type="application/json"))]
    
