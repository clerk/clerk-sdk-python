"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .commercemoneyresponse import CommerceMoneyResponse, CommerceMoneyResponseTypedDict
from .featureresponse import FeatureResponse, FeatureResponseTypedDict
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class CommercePlanObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value."""

    COMMERCE_PLAN = "commerce_plan"


class CommercePlanTypedDict(TypedDict):
    object: CommercePlanObject
    r"""String representing the object's type. Objects of the same type share the same value."""
    id: str
    r"""Unique identifier for the commerce plan."""
    name: str
    r"""The name of the commerce plan."""
    fee: CommerceMoneyResponseTypedDict
    annual_monthly_fee: CommerceMoneyResponseTypedDict
    annual_fee: CommerceMoneyResponseTypedDict
    amount: int
    r"""The amount in cents for the plan."""
    amount_formatted: str
    r"""The formatted amount as a string (e.g., \"$49.99\")."""
    annual_monthly_amount: int
    r"""The monthly amount in cents when billed annually."""
    annual_monthly_amount_formatted: str
    r"""The formatted annual monthly amount as a string."""
    annual_amount: int
    r"""The total annual amount in cents."""
    annual_amount_formatted: str
    r"""The formatted annual amount as a string."""
    currency_symbol: str
    r"""The currency symbol (e.g., \"$\")."""
    currency: str
    r"""The currency code (e.g., \"USD\")."""
    description: str
    r"""The description of the commerce plan."""
    product_id: str
    r"""The ID of the product this plan belongs to."""
    is_default: bool
    r"""Whether this is the default plan."""
    is_recurring: bool
    r"""Whether this is a recurring plan."""
    publicly_visible: bool
    r"""Whether this plan is publicly visible."""
    has_base_fee: bool
    r"""Whether this plan has a base fee."""
    payer_type: List[str]
    r"""The types of payers that can use this plan."""
    for_payer_type: str
    r"""The payer type this plan is designed for."""
    slug: str
    r"""The URL-friendly slug for the plan."""
    avatar_url: str
    r"""The URL of the plan's avatar image."""
    features: List[FeatureResponseTypedDict]
    r"""The features included in this plan."""
    period: NotRequired[str]
    r"""The billing period for the plan."""
    interval: NotRequired[int]
    r"""The billing interval."""
    free_trial_enabled: NotRequired[bool]
    r"""Whether free trial is enabled for this plan."""
    free_trial_days: NotRequired[Nullable[int]]
    r"""Number of free trial days for this plan."""


class CommercePlan(BaseModel):
    object: CommercePlanObject
    r"""String representing the object's type. Objects of the same type share the same value."""

    id: str
    r"""Unique identifier for the commerce plan."""

    name: str
    r"""The name of the commerce plan."""

    fee: CommerceMoneyResponse

    annual_monthly_fee: CommerceMoneyResponse

    annual_fee: CommerceMoneyResponse

    amount: int
    r"""The amount in cents for the plan."""

    amount_formatted: str
    r"""The formatted amount as a string (e.g., \"$49.99\")."""

    annual_monthly_amount: int
    r"""The monthly amount in cents when billed annually."""

    annual_monthly_amount_formatted: str
    r"""The formatted annual monthly amount as a string."""

    annual_amount: int
    r"""The total annual amount in cents."""

    annual_amount_formatted: str
    r"""The formatted annual amount as a string."""

    currency_symbol: str
    r"""The currency symbol (e.g., \"$\")."""

    currency: str
    r"""The currency code (e.g., \"USD\")."""

    description: str
    r"""The description of the commerce plan."""

    product_id: str
    r"""The ID of the product this plan belongs to."""

    is_default: bool
    r"""Whether this is the default plan."""

    is_recurring: bool
    r"""Whether this is a recurring plan."""

    publicly_visible: bool
    r"""Whether this plan is publicly visible."""

    has_base_fee: bool
    r"""Whether this plan has a base fee."""

    payer_type: List[str]
    r"""The types of payers that can use this plan."""

    for_payer_type: str
    r"""The payer type this plan is designed for."""

    slug: str
    r"""The URL-friendly slug for the plan."""

    avatar_url: str
    r"""The URL of the plan's avatar image."""

    features: List[FeatureResponse]
    r"""The features included in this plan."""

    period: Optional[str] = None
    r"""The billing period for the plan."""

    interval: Optional[int] = None
    r"""The billing interval."""

    free_trial_enabled: Optional[bool] = None
    r"""Whether free trial is enabled for this plan."""

    free_trial_days: OptionalNullable[int] = UNSET
    r"""Number of free trial days for this plan."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "period",
            "interval",
            "free_trial_enabled",
            "free_trial_days",
        ]
        nullable_fields = ["free_trial_days"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
