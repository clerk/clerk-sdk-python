"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Any, Dict
from typing_extensions import NotRequired, TypedDict


class CreateOrganizationRequestBodyTypedDict(TypedDict):
    name: str
    r"""The name of the new organization.
    May not contain URLs or HTML.
    Max length: 256
    """
    created_by: NotRequired[Nullable[str]]
    r"""The ID of the User who will become the administrator for the new organization"""
    private_metadata: NotRequired[Nullable[Dict[str, Any]]]
    r"""Metadata saved on the organization, accessible only from the Backend API"""
    public_metadata: NotRequired[Nullable[Dict[str, Any]]]
    r"""Metadata saved on the organization, read-only from the Frontend API and fully accessible (read/write) from the Backend API"""
    slug: NotRequired[Nullable[str]]
    r"""A slug for the new organization.
    Can contain only lowercase alphanumeric characters and the dash \"-\".
    Must be unique for the instance.
    """
    max_allowed_memberships: NotRequired[Nullable[int]]
    r"""The maximum number of memberships allowed for this organization"""
    created_at: NotRequired[Nullable[str]]
    r"""A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`)."""


class CreateOrganizationRequestBody(BaseModel):
    name: str
    r"""The name of the new organization.
    May not contain URLs or HTML.
    Max length: 256
    """

    created_by: OptionalNullable[str] = UNSET
    r"""The ID of the User who will become the administrator for the new organization"""

    private_metadata: OptionalNullable[Dict[str, Any]] = UNSET
    r"""Metadata saved on the organization, accessible only from the Backend API"""

    public_metadata: OptionalNullable[Dict[str, Any]] = UNSET
    r"""Metadata saved on the organization, read-only from the Frontend API and fully accessible (read/write) from the Backend API"""

    slug: OptionalNullable[str] = UNSET
    r"""A slug for the new organization.
    Can contain only lowercase alphanumeric characters and the dash \"-\".
    Must be unique for the instance.
    """

    max_allowed_memberships: OptionalNullable[int] = UNSET
    r"""The maximum number of memberships allowed for this organization"""

    created_at: OptionalNullable[str] = UNSET
    r"""A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`)."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "created_by",
            "private_metadata",
            "public_metadata",
            "slug",
            "max_allowed_memberships",
            "created_at",
        ]
        nullable_fields = [
            "created_by",
            "private_metadata",
            "public_metadata",
            "slug",
            "max_allowed_memberships",
            "created_at",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
