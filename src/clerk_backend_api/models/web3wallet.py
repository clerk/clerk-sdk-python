"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api import utils
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from clerk_backend_api.utils import get_discriminator, validate_open_enum
from enum import Enum
from pydantic import Discriminator, Tag, model_serializer
from pydantic.functional_validators import PlainValidator
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class Web3WalletObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value."""

    WEB3_WALLET = "web3_wallet"


class VerificationAdminVerificationWeb3WalletObject(str, Enum):
    VERIFICATION_ADMIN = "verification_admin"


class VerificationAdminVerificationWeb3WalletStatus(str, Enum):
    VERIFIED = "verified"


class VerificationAdminVerificationWeb3WalletStrategy(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    ADMIN = "admin"


class VerificationAdminVerificationAdminTypedDict(TypedDict):
    status: VerificationAdminVerificationWeb3WalletStatus
    strategy: VerificationAdminVerificationWeb3WalletStrategy
    attempts: Nullable[int]
    expire_at: Nullable[int]
    object: NotRequired[VerificationAdminVerificationWeb3WalletObject]
    verified_at_client: NotRequired[Nullable[str]]


class VerificationAdminVerificationAdmin(BaseModel):
    status: VerificationAdminVerificationWeb3WalletStatus

    strategy: Annotated[
        VerificationAdminVerificationWeb3WalletStrategy,
        PlainValidator(validate_open_enum(False)),
    ]

    attempts: Nullable[int]

    expire_at: Nullable[int]

    object: Optional[VerificationAdminVerificationWeb3WalletObject] = None

    verified_at_client: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["object", "verified_at_client"]
        nullable_fields = ["attempts", "expire_at", "verified_at_client"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class VerificationWeb3VerificationObject(str, Enum):
    VERIFICATION_WEB3 = "verification_web3"


class VerificationWeb3VerificationStatus(str, Enum):
    UNVERIFIED = "unverified"
    VERIFIED = "verified"
    FAILED = "failed"
    EXPIRED = "expired"


class VerificationWeb3VerificationStrategy(str, Enum):
    WEB3_METAMASK_SIGNATURE = "web3_metamask_signature"
    WEB3_COINBASE_WALLET_SIGNATURE = "web3_coinbase_wallet_signature"
    WEB3_OKX_WALLET_SIGNATURE = "web3_okx_wallet_signature"


class Web3SignatureTypedDict(TypedDict):
    status: VerificationWeb3VerificationStatus
    strategy: VerificationWeb3VerificationStrategy
    attempts: Nullable[int]
    expire_at: Nullable[int]
    object: NotRequired[VerificationWeb3VerificationObject]
    nonce: NotRequired[Nullable[str]]
    message: NotRequired[Nullable[str]]
    verified_at_client: NotRequired[Nullable[str]]


class Web3Signature(BaseModel):
    status: VerificationWeb3VerificationStatus

    strategy: VerificationWeb3VerificationStrategy

    attempts: Nullable[int]

    expire_at: Nullable[int]

    object: Optional[VerificationWeb3VerificationObject] = None

    nonce: OptionalNullable[str] = UNSET

    message: OptionalNullable[str] = UNSET

    verified_at_client: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["object", "nonce", "message", "verified_at_client"]
        nullable_fields = [
            "nonce",
            "message",
            "attempts",
            "expire_at",
            "verified_at_client",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


Web3WalletVerificationTypedDict = TypeAliasType(
    "Web3WalletVerificationTypedDict",
    Union[VerificationAdminVerificationAdminTypedDict, Web3SignatureTypedDict],
)


Web3WalletVerification = Annotated[
    Union[
        Annotated[Web3Signature, Tag("verification_web3")],
        Annotated[VerificationAdminVerificationAdmin, Tag("verification_admin")],
    ],
    Discriminator(lambda m: get_discriminator(m, "object", "object")),
]


class Web3WalletTypedDict(TypedDict):
    object: Web3WalletObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    web3_wallet: str
    verification: Nullable[Web3WalletVerificationTypedDict]
    created_at: int
    r"""Unix timestamp of creation

    """
    updated_at: int
    r"""Unix timestamp of creation

    """
    id: NotRequired[str]


class Web3Wallet(BaseModel):
    object: Web3WalletObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """

    web3_wallet: str

    verification: Nullable[Web3WalletVerification]

    created_at: int
    r"""Unix timestamp of creation

    """

    updated_at: int
    r"""Unix timestamp of creation

    """

    id: Optional[str] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["id"]
        nullable_fields = ["verification"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
