"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class CreateEmailAddressRequestBodyTypedDict(TypedDict):
    user_id: str
    r"""The ID representing the user"""
    email_address: str
    r"""The new email address. Must adhere to the RFC 5322 specification for email address format."""
    verified: NotRequired[Nullable[bool]]
    r"""When created, the email address will be marked as verified."""
    primary: NotRequired[Nullable[bool]]
    r"""Create this email address as the primary email address for the user.
    Default: false, unless it is the first email address.
    """


class CreateEmailAddressRequestBody(BaseModel):
    user_id: str
    r"""The ID representing the user"""

    email_address: str
    r"""The new email address. Must adhere to the RFC 5322 specification for email address format."""

    verified: OptionalNullable[bool] = UNSET
    r"""When created, the email address will be marked as verified."""

    primary: OptionalNullable[bool] = UNSET
    r"""Create this email address as the primary email address for the user.
    Default: false, unless it is the first email address.
    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["verified", "primary"]
        nullable_fields = ["verified", "primary"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
