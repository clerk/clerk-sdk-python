"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class UpdateInstanceRestrictionsRequestBodyTypedDict(TypedDict):
    allowlist: NotRequired[Nullable[bool]]
    blocklist: NotRequired[Nullable[bool]]
    allowlist_blocklist_disabled_on_sign_in: NotRequired[Nullable[bool]]
    block_email_subaddresses: NotRequired[Nullable[bool]]
    block_disposable_email_domains: NotRequired[Nullable[bool]]


class UpdateInstanceRestrictionsRequestBody(BaseModel):
    allowlist: OptionalNullable[bool] = UNSET

    blocklist: OptionalNullable[bool] = UNSET

    allowlist_blocklist_disabled_on_sign_in: OptionalNullable[bool] = UNSET

    block_email_subaddresses: OptionalNullable[bool] = UNSET

    block_disposable_email_domains: OptionalNullable[bool] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "allowlist",
            "blocklist",
            "allowlist_blocklist_disabled_on_sign_in",
            "block_email_subaddresses",
            "block_disposable_email_domains",
        ]
        nullable_fields = [
            "allowlist",
            "blocklist",
            "allowlist_blocklist_disabled_on_sign_in",
            "block_email_subaddresses",
            "block_disposable_email_domains",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
