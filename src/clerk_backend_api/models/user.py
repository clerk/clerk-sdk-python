"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .emailaddress import EmailAddress, EmailAddressTypedDict
from .externalaccountwithverification import (
    ExternalAccountWithVerification,
    ExternalAccountWithVerificationTypedDict,
)
from .passkey import Passkey, PasskeyTypedDict
from .phonenumber import PhoneNumber, PhoneNumberTypedDict
from .samlaccount import SAMLAccount, SAMLAccountTypedDict
from .web3wallet import Web3Wallet, Web3WalletTypedDict
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UserObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value."""

    USER = "user"


class UserTypedDict(TypedDict):
    r"""Success"""

    id: str
    object: UserObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    external_id: Nullable[str]
    primary_email_address_id: Nullable[str]
    primary_phone_number_id: Nullable[str]
    primary_web3_wallet_id: Nullable[str]
    username: Nullable[str]
    first_name: Nullable[str]
    last_name: Nullable[str]
    has_image: bool
    public_metadata: Dict[str, Any]
    email_addresses: List[EmailAddressTypedDict]
    phone_numbers: List[PhoneNumberTypedDict]
    web3_wallets: List[Web3WalletTypedDict]
    passkeys: List[PasskeyTypedDict]
    password_enabled: bool
    two_factor_enabled: bool
    totp_enabled: bool
    backup_code_enabled: bool
    mfa_enabled_at: Nullable[int]
    r"""Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.

    """
    mfa_disabled_at: Nullable[int]
    r"""Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.

    """
    external_accounts: List[ExternalAccountWithVerificationTypedDict]
    saml_accounts: List[SAMLAccountTypedDict]
    last_sign_in_at: Nullable[int]
    r"""Unix timestamp of last sign-in.

    """
    banned: bool
    r"""Flag to denote whether user is banned or not.

    """
    locked: bool
    r"""Flag to denote whether user is currently locked, i.e. restricted from signing in or not.

    """
    lockout_expires_in_seconds: Nullable[int]
    r"""The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.

    """
    verification_attempts_remaining: Nullable[int]
    r"""The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.

    """
    updated_at: int
    r"""Unix timestamp of last update.

    """
    created_at: int
    r"""Unix timestamp of creation.

    """
    delete_self_enabled: bool
    r"""If enabled, user can delete themselves via FAPI.

    """
    create_organization_enabled: bool
    r"""If enabled, user can create organizations via FAPI.

    """
    last_active_at: Nullable[int]
    r"""Unix timestamp of the latest session activity, with day precision.

    """
    legal_accepted_at: Nullable[int]
    r"""Unix timestamp of when the user accepted the legal requirements.

    """
    profile_image_url: NotRequired[str]
    image_url: NotRequired[str]
    private_metadata: NotRequired[Nullable[Dict[str, Any]]]
    unsafe_metadata: NotRequired[Dict[str, Any]]
    create_organizations_limit: NotRequired[Nullable[int]]
    r"""The maximum number of organizations the user can create. 0 means unlimited.

    """


class User(BaseModel):
    r"""Success"""

    id: str

    object: UserObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """

    external_id: Nullable[str]

    primary_email_address_id: Nullable[str]

    primary_phone_number_id: Nullable[str]

    primary_web3_wallet_id: Nullable[str]

    username: Nullable[str]

    first_name: Nullable[str]

    last_name: Nullable[str]

    has_image: bool

    public_metadata: Dict[str, Any]

    email_addresses: List[EmailAddress]

    phone_numbers: List[PhoneNumber]

    web3_wallets: List[Web3Wallet]

    passkeys: List[Passkey]

    password_enabled: bool

    two_factor_enabled: bool

    totp_enabled: bool

    backup_code_enabled: bool

    mfa_enabled_at: Nullable[int]
    r"""Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.

    """

    mfa_disabled_at: Nullable[int]
    r"""Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.

    """

    external_accounts: List[ExternalAccountWithVerification]

    saml_accounts: List[SAMLAccount]

    last_sign_in_at: Nullable[int]
    r"""Unix timestamp of last sign-in.

    """

    banned: bool
    r"""Flag to denote whether user is banned or not.

    """

    locked: bool
    r"""Flag to denote whether user is currently locked, i.e. restricted from signing in or not.

    """

    lockout_expires_in_seconds: Nullable[int]
    r"""The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.

    """

    verification_attempts_remaining: Nullable[int]
    r"""The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.

    """

    updated_at: int
    r"""Unix timestamp of last update.

    """

    created_at: int
    r"""Unix timestamp of creation.

    """

    delete_self_enabled: bool
    r"""If enabled, user can delete themselves via FAPI.

    """

    create_organization_enabled: bool
    r"""If enabled, user can create organizations via FAPI.

    """

    last_active_at: Nullable[int]
    r"""Unix timestamp of the latest session activity, with day precision.

    """

    legal_accepted_at: Nullable[int]
    r"""Unix timestamp of when the user accepted the legal requirements.

    """

    profile_image_url: Annotated[
        Optional[str],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None

    image_url: Optional[str] = None

    private_metadata: OptionalNullable[Dict[str, Any]] = UNSET

    unsafe_metadata: Optional[Dict[str, Any]] = None

    create_organizations_limit: OptionalNullable[int] = UNSET
    r"""The maximum number of organizations the user can create. 0 means unlimited.

    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "profile_image_url",
            "image_url",
            "private_metadata",
            "unsafe_metadata",
            "create_organizations_limit",
        ]
        nullable_fields = [
            "external_id",
            "primary_email_address_id",
            "primary_phone_number_id",
            "primary_web3_wallet_id",
            "username",
            "first_name",
            "last_name",
            "private_metadata",
            "mfa_enabled_at",
            "mfa_disabled_at",
            "last_sign_in_at",
            "lockout_expires_in_seconds",
            "verification_attempts_remaining",
            "create_organizations_limit",
            "last_active_at",
            "legal_accepted_at",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
