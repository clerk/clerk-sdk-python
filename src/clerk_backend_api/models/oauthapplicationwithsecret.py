"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OAuthApplicationWithSecretObject(str, Enum):
    OAUTH_APPLICATION = "oauth_application"


class OAuthApplicationWithSecretTypedDict(TypedDict):
    object: OAuthApplicationWithSecretObject
    id: str
    instance_id: str
    name: str
    client_id: str
    client_uri: Nullable[str]
    client_image_url: Nullable[str]
    dynamically_registered: bool
    consent_screen_enabled: bool
    pkce_required: bool
    public: bool
    scopes: str
    redirect_uris: List[str]
    callback_url: str
    r"""Deprecated: Use redirect_uris instead.

    """
    authorize_url: str
    token_fetch_url: str
    user_info_url: str
    discovery_url: str
    token_introspection_url: str
    created_at: int
    r"""Unix timestamp of creation.

    """
    updated_at: int
    r"""Unix timestamp of last update.

    """
    client_secret: NotRequired[str]
    r"""Empty if public client.

    """


class OAuthApplicationWithSecret(BaseModel):
    object: OAuthApplicationWithSecretObject

    id: str

    instance_id: str

    name: str

    client_id: str

    client_uri: Nullable[str]

    client_image_url: Nullable[str]

    dynamically_registered: bool

    consent_screen_enabled: bool

    pkce_required: bool

    public: bool

    scopes: str

    redirect_uris: List[str]

    callback_url: Annotated[
        str,
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ]
    r"""Deprecated: Use redirect_uris instead.

    """

    authorize_url: str

    token_fetch_url: str

    user_info_url: str

    discovery_url: str

    token_introspection_url: str

    created_at: int
    r"""Unix timestamp of creation.

    """

    updated_at: int
    r"""Unix timestamp of last update.

    """

    client_secret: Optional[str] = None
    r"""Empty if public client.

    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["client_secret"]
        nullable_fields = ["client_uri", "client_image_url"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
