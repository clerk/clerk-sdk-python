"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .commercemoneyresponse import CommerceMoneyResponse, CommerceMoneyResponseTypedDict
from .featureresponse import FeatureResponse, FeatureResponseTypedDict
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CommerceSubscriptionItemObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value."""

    COMMERCE_SUBSCRIPTION_ITEM = "commerce_subscription_item"


class CommerceSubscriptionItemStatus(str, Enum):
    r"""Current status of the subscription item."""

    ACTIVE = "active"
    ENDED = "ended"
    PAST_DUE = "past_due"
    UPCOMING = "upcoming"
    INCOMPLETE = "incomplete"
    ABANDONED = "abandoned"


class CommerceSubscriptionItemAmountTypedDict(TypedDict):
    r"""Credit amount."""

    amount: int
    r"""The amount in cents."""
    amount_formatted: str
    r"""The formatted amount as a string (e.g., \"$49.99\")."""
    currency: str
    r"""The currency code (e.g., \"USD\")."""
    currency_symbol: str
    r"""The currency symbol (e.g., \"$\")."""


class CommerceSubscriptionItemAmount(BaseModel):
    r"""Credit amount."""

    amount: int
    r"""The amount in cents."""

    amount_formatted: str
    r"""The formatted amount as a string (e.g., \"$49.99\")."""

    currency: str
    r"""The currency code (e.g., \"USD\")."""

    currency_symbol: str
    r"""The currency symbol (e.g., \"$\")."""


class CreditTypedDict(TypedDict):
    r"""Credit information (only available in PaymentAttempt events)."""

    amount: NotRequired[Nullable[CommerceSubscriptionItemAmountTypedDict]]
    r"""Credit amount."""
    cycle_remaining_percent: NotRequired[float]
    r"""Percentage of the billing cycle remaining."""


class Credit(BaseModel):
    r"""Credit information (only available in PaymentAttempt events)."""

    amount: OptionalNullable[CommerceSubscriptionItemAmount] = UNSET
    r"""Credit amount."""

    cycle_remaining_percent: Optional[float] = None
    r"""Percentage of the billing cycle remaining."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["amount", "cycle_remaining_percent"]
        nullable_fields = ["amount"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CommerceSubscriptionItemPlanObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value."""

    COMMERCE_PLAN = "commerce_plan"


class PlanTypedDict(TypedDict):
    r"""The associated commerce plan."""

    object: CommerceSubscriptionItemPlanObject
    r"""String representing the object's type. Objects of the same type share the same value."""
    id: str
    r"""Unique identifier for the commerce plan."""
    name: str
    r"""The name of the commerce plan."""
    fee: CommerceMoneyResponseTypedDict
    annual_monthly_fee: CommerceMoneyResponseTypedDict
    annual_fee: CommerceMoneyResponseTypedDict
    amount: int
    r"""The amount in cents for the plan."""
    amount_formatted: str
    r"""The formatted amount as a string (e.g., \"$49.99\")."""
    annual_monthly_amount: int
    r"""The monthly amount in cents when billed annually."""
    annual_monthly_amount_formatted: str
    r"""The formatted annual monthly amount as a string."""
    annual_amount: int
    r"""The total annual amount in cents."""
    annual_amount_formatted: str
    r"""The formatted annual amount as a string."""
    currency_symbol: str
    r"""The currency symbol (e.g., \"$\")."""
    currency: str
    r"""The currency code (e.g., \"USD\")."""
    description: str
    r"""The description of the commerce plan."""
    product_id: str
    r"""The ID of the product this plan belongs to."""
    is_default: bool
    r"""Whether this is the default plan."""
    is_recurring: bool
    r"""Whether this is a recurring plan."""
    publicly_visible: bool
    r"""Whether this plan is publicly visible."""
    has_base_fee: bool
    r"""Whether this plan has a base fee."""
    payer_type: List[str]
    r"""The types of payers that can use this plan."""
    for_payer_type: str
    r"""The payer type this plan is designed for."""
    slug: str
    r"""The URL-friendly slug for the plan."""
    avatar_url: str
    r"""The URL of the plan's avatar image."""
    features: List[FeatureResponseTypedDict]
    r"""The features included in this plan."""
    period: NotRequired[str]
    r"""The billing period for the plan."""
    interval: NotRequired[int]
    r"""The billing interval."""
    free_trial_enabled: NotRequired[bool]
    r"""Whether free trial is enabled for this plan."""
    free_trial_days: NotRequired[Nullable[int]]
    r"""Number of free trial days for this plan."""


class Plan(BaseModel):
    r"""The associated commerce plan."""

    object: CommerceSubscriptionItemPlanObject
    r"""String representing the object's type. Objects of the same type share the same value."""

    id: str
    r"""Unique identifier for the commerce plan."""

    name: str
    r"""The name of the commerce plan."""

    fee: CommerceMoneyResponse

    annual_monthly_fee: CommerceMoneyResponse

    annual_fee: CommerceMoneyResponse

    amount: int
    r"""The amount in cents for the plan."""

    amount_formatted: str
    r"""The formatted amount as a string (e.g., \"$49.99\")."""

    annual_monthly_amount: int
    r"""The monthly amount in cents when billed annually."""

    annual_monthly_amount_formatted: str
    r"""The formatted annual monthly amount as a string."""

    annual_amount: int
    r"""The total annual amount in cents."""

    annual_amount_formatted: str
    r"""The formatted annual amount as a string."""

    currency_symbol: str
    r"""The currency symbol (e.g., \"$\")."""

    currency: str
    r"""The currency code (e.g., \"USD\")."""

    description: str
    r"""The description of the commerce plan."""

    product_id: str
    r"""The ID of the product this plan belongs to."""

    is_default: bool
    r"""Whether this is the default plan."""

    is_recurring: bool
    r"""Whether this is a recurring plan."""

    publicly_visible: bool
    r"""Whether this plan is publicly visible."""

    has_base_fee: bool
    r"""Whether this plan has a base fee."""

    payer_type: List[str]
    r"""The types of payers that can use this plan."""

    for_payer_type: str
    r"""The payer type this plan is designed for."""

    slug: str
    r"""The URL-friendly slug for the plan."""

    avatar_url: str
    r"""The URL of the plan's avatar image."""

    features: List[FeatureResponse]
    r"""The features included in this plan."""

    period: Optional[str] = None
    r"""The billing period for the plan."""

    interval: Optional[int] = None
    r"""The billing interval."""

    free_trial_enabled: Optional[bool] = None
    r"""Whether free trial is enabled for this plan."""

    free_trial_days: OptionalNullable[int] = UNSET
    r"""Number of free trial days for this plan."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "period",
            "interval",
            "free_trial_enabled",
            "free_trial_days",
        ]
        nullable_fields = ["free_trial_days"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class PlanPeriod(str, Enum):
    r"""The billing period for this subscription."""

    MONTH = "month"
    ANNUAL = "annual"


class CommerceSubscriptionItemPaymentSourceObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value."""

    COMMERCE_SOURCE = "commerce_source"


class PaymentMethod(str, Enum):
    r"""The payment method type."""

    CARD = "card"
    APPLE_PAY = "apple_pay"
    GOOGLE_PAY = "google_pay"


class CommerceSubscriptionItemPaymentSourceStatus(str, Enum):
    r"""Status of the payment source."""

    ACTIVE = "active"
    DISCONNECTED = "disconnected"


class PaymentSourceTypedDict(TypedDict):
    r"""The payment source associated with this subscription."""

    object: CommerceSubscriptionItemPaymentSourceObject
    r"""String representing the object's type. Objects of the same type share the same value."""
    id: str
    r"""Unique identifier for the payment source."""
    payer_id: str
    r"""Unique identifier for the payer."""
    payment_method: PaymentMethod
    r"""The payment method type."""
    gateway: str
    r"""The payment gateway."""
    gateway_external_id: str
    r"""External ID in the payment gateway."""
    last4: str
    r"""Last 4 digits of the card (for card payment sources)."""
    status: CommerceSubscriptionItemPaymentSourceStatus
    r"""Status of the payment source."""
    wallet_type: str
    r"""Type of wallet (if applicable)."""
    card_type: str
    r"""Type of card (if applicable)."""
    created_at: int
    r"""Unix timestamp (in milliseconds) when the payment source was created."""
    updated_at: int
    r"""Unix timestamp (in milliseconds) when the payment source was last updated."""
    is_default: NotRequired[Nullable[bool]]
    r"""Whether this is the default payment source for the payer."""
    gateway_external_account_id: NotRequired[Nullable[str]]
    r"""External account ID in the payment gateway."""
    expiry_year: NotRequired[int]
    r"""Card expiration year (for card payment sources)."""
    expiry_month: NotRequired[int]
    r"""Card expiration month (for card payment sources)."""
    is_removable: NotRequired[Nullable[bool]]
    r"""Whether this payment source can be removed."""


class PaymentSource(BaseModel):
    r"""The payment source associated with this subscription."""

    object: CommerceSubscriptionItemPaymentSourceObject
    r"""String representing the object's type. Objects of the same type share the same value."""

    id: str
    r"""Unique identifier for the payment source."""

    payer_id: str
    r"""Unique identifier for the payer."""

    payment_method: PaymentMethod
    r"""The payment method type."""

    gateway: str
    r"""The payment gateway."""

    gateway_external_id: str
    r"""External ID in the payment gateway."""

    last4: str
    r"""Last 4 digits of the card (for card payment sources)."""

    status: CommerceSubscriptionItemPaymentSourceStatus
    r"""Status of the payment source."""

    wallet_type: str
    r"""Type of wallet (if applicable)."""

    card_type: str
    r"""Type of card (if applicable)."""

    created_at: int
    r"""Unix timestamp (in milliseconds) when the payment source was created."""

    updated_at: int
    r"""Unix timestamp (in milliseconds) when the payment source was last updated."""

    is_default: OptionalNullable[bool] = UNSET
    r"""Whether this is the default payment source for the payer."""

    gateway_external_account_id: OptionalNullable[str] = UNSET
    r"""External account ID in the payment gateway."""

    expiry_year: Optional[int] = None
    r"""Card expiration year (for card payment sources)."""

    expiry_month: Optional[int] = None
    r"""Card expiration month (for card payment sources)."""

    is_removable: OptionalNullable[bool] = UNSET
    r"""Whether this payment source can be removed."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "is_default",
            "gateway_external_account_id",
            "expiry_year",
            "expiry_month",
            "is_removable",
        ]
        nullable_fields = ["is_default", "gateway_external_account_id", "is_removable"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class LifetimePaidTypedDict(TypedDict):
    r"""Total amount paid over the lifetime of this subscription."""

    amount: int
    r"""The amount in cents."""
    amount_formatted: str
    r"""The formatted amount as a string (e.g., \"$49.99\")."""
    currency: str
    r"""The currency code (e.g., \"USD\")."""
    currency_symbol: str
    r"""The currency symbol (e.g., \"$\")."""


class LifetimePaid(BaseModel):
    r"""Total amount paid over the lifetime of this subscription."""

    amount: int
    r"""The amount in cents."""

    amount_formatted: str
    r"""The formatted amount as a string (e.g., \"$49.99\")."""

    currency: str
    r"""The currency code (e.g., \"USD\")."""

    currency_symbol: str
    r"""The currency symbol (e.g., \"$\")."""


class AmountTypedDict(TypedDict):
    r"""Current amount for this subscription."""

    amount: int
    r"""The amount in cents."""
    amount_formatted: str
    r"""The formatted amount as a string (e.g., \"$49.99\")."""
    currency: str
    r"""The currency code (e.g., \"USD\")."""
    currency_symbol: str
    r"""The currency symbol (e.g., \"$\")."""


class Amount(BaseModel):
    r"""Current amount for this subscription."""

    amount: int
    r"""The amount in cents."""

    amount_formatted: str
    r"""The formatted amount as a string (e.g., \"$49.99\")."""

    currency: str
    r"""The currency code (e.g., \"USD\")."""

    currency_symbol: str
    r"""The currency symbol (e.g., \"$\")."""


class CommerceSubscriptionItemNextInvoiceAmountTypedDict(TypedDict):
    r"""Amount for the next payment."""

    amount: int
    r"""The amount in cents."""
    amount_formatted: str
    r"""The formatted amount as a string (e.g., \"$49.99\")."""
    currency: str
    r"""The currency code (e.g., \"USD\")."""
    currency_symbol: str
    r"""The currency symbol (e.g., \"$\")."""


class CommerceSubscriptionItemNextInvoiceAmount(BaseModel):
    r"""Amount for the next payment."""

    amount: int
    r"""The amount in cents."""

    amount_formatted: str
    r"""The formatted amount as a string (e.g., \"$49.99\")."""

    currency: str
    r"""The currency code (e.g., \"USD\")."""

    currency_symbol: str
    r"""The currency symbol (e.g., \"$\")."""


class NextInvoiceTypedDict(TypedDict):
    r"""Information about the next invoice."""

    amount: NotRequired[Nullable[CommerceSubscriptionItemNextInvoiceAmountTypedDict]]
    r"""Amount for the next payment."""
    date_: NotRequired[Nullable[int]]
    r"""Unix timestamp (in milliseconds) for the next payment date."""


class NextInvoice(BaseModel):
    r"""Information about the next invoice."""

    amount: OptionalNullable[CommerceSubscriptionItemNextInvoiceAmount] = UNSET
    r"""Amount for the next payment."""

    date_: Annotated[OptionalNullable[int], pydantic.Field(alias="date")] = UNSET
    r"""Unix timestamp (in milliseconds) for the next payment date."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["amount", "date"]
        nullable_fields = ["amount", "date"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CommerceSubscriptionItemNextPaymentAmountTypedDict(TypedDict):
    r"""Amount for the next payment."""

    amount: int
    r"""The amount in cents."""
    amount_formatted: str
    r"""The formatted amount as a string (e.g., \"$49.99\")."""
    currency: str
    r"""The currency code (e.g., \"USD\")."""
    currency_symbol: str
    r"""The currency symbol (e.g., \"$\")."""


class CommerceSubscriptionItemNextPaymentAmount(BaseModel):
    r"""Amount for the next payment."""

    amount: int
    r"""The amount in cents."""

    amount_formatted: str
    r"""The formatted amount as a string (e.g., \"$49.99\")."""

    currency: str
    r"""The currency code (e.g., \"USD\")."""

    currency_symbol: str
    r"""The currency symbol (e.g., \"$\")."""


class NextPaymentTypedDict(TypedDict):
    r"""Information about the next payment."""

    amount: NotRequired[Nullable[CommerceSubscriptionItemNextPaymentAmountTypedDict]]
    r"""Amount for the next payment."""
    date_: NotRequired[Nullable[int]]
    r"""Unix timestamp (in milliseconds) for the next payment date."""


class NextPayment(BaseModel):
    r"""Information about the next payment."""

    amount: OptionalNullable[CommerceSubscriptionItemNextPaymentAmount] = UNSET
    r"""Amount for the next payment."""

    date_: Annotated[OptionalNullable[int], pydantic.Field(alias="date")] = UNSET
    r"""Unix timestamp (in milliseconds) for the next payment date."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["amount", "date"]
        nullable_fields = ["amount", "date"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CommerceSubscriptionItemPayerObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value."""

    COMMERCE_PAYER = "commerce_payer"


class PayerTypedDict(TypedDict):
    r"""The payer associated with this subscription."""

    object: CommerceSubscriptionItemPayerObject
    r"""String representing the object's type. Objects of the same type share the same value."""
    id: str
    r"""Unique identifier for the payer."""
    instance_id: str
    r"""Unique identifier for the Clerk instance."""
    first_name: str
    r"""First name of the payer."""
    last_name: str
    r"""Last name of the payer."""
    email: str
    r"""Email address of the payer."""
    image_url: str
    r"""URL of the payer's image/avatar."""
    created_at: int
    r"""Unix timestamp (in milliseconds) when the payer was created."""
    updated_at: int
    r"""Unix timestamp (in milliseconds) when the payer was last updated."""
    user_id: NotRequired[str]
    r"""User ID for user-type payers."""
    organization_id: NotRequired[str]
    r"""Organization ID for org-type payers."""
    organization_name: NotRequired[str]
    r"""Organization name for org-type payers."""


class Payer(BaseModel):
    r"""The payer associated with this subscription."""

    object: CommerceSubscriptionItemPayerObject
    r"""String representing the object's type. Objects of the same type share the same value."""

    id: str
    r"""Unique identifier for the payer."""

    instance_id: str
    r"""Unique identifier for the Clerk instance."""

    first_name: str
    r"""First name of the payer."""

    last_name: str
    r"""Last name of the payer."""

    email: str
    r"""Email address of the payer."""

    image_url: str
    r"""URL of the payer's image/avatar."""

    created_at: int
    r"""Unix timestamp (in milliseconds) when the payer was created."""

    updated_at: int
    r"""Unix timestamp (in milliseconds) when the payer was last updated."""

    user_id: Optional[str] = None
    r"""User ID for user-type payers."""

    organization_id: Optional[str] = None
    r"""Organization ID for org-type payers."""

    organization_name: Optional[str] = None
    r"""Organization name for org-type payers."""


class CommerceSubscriptionItemTypedDict(TypedDict):
    object: CommerceSubscriptionItemObject
    r"""String representing the object's type. Objects of the same type share the same value."""
    id: str
    r"""Unique identifier for the subscription item."""
    instance_id: str
    r"""Unique identifier for the Clerk instance."""
    status: CommerceSubscriptionItemStatus
    r"""Current status of the subscription item."""
    plan_id: str
    r"""Unique identifier for the associated plan."""
    plan: Nullable[PlanTypedDict]
    r"""The associated commerce plan."""
    plan_period: PlanPeriod
    r"""The billing period for this subscription."""
    payment_source_id: str
    r"""Unique identifier for the payment source."""
    payer_id: str
    r"""Unique identifier for the payer."""
    is_free_trial: bool
    r"""Whether this subscription is currently on a free trial."""
    proration_date: str
    r"""Date used for proration calculations."""
    created_at: int
    r"""Unix timestamp (in milliseconds) when the subscription was created."""
    updated_at: int
    r"""Unix timestamp (in milliseconds) when the subscription was last updated."""
    credit: NotRequired[Nullable[CreditTypedDict]]
    r"""Credit information (only available in PaymentAttempt events)."""
    payment_source: NotRequired[Nullable[PaymentSourceTypedDict]]
    r"""The payment source associated with this subscription."""
    lifetime_paid: NotRequired[Nullable[LifetimePaidTypedDict]]
    r"""Total amount paid over the lifetime of this subscription."""
    amount: NotRequired[Nullable[AmountTypedDict]]
    r"""Current amount for this subscription."""
    next_invoice: NotRequired[Nullable[NextInvoiceTypedDict]]
    r"""Information about the next invoice."""
    next_payment: NotRequired[Nullable[NextPaymentTypedDict]]
    r"""Information about the next payment."""
    payer: NotRequired[Nullable[PayerTypedDict]]
    r"""The payer associated with this subscription."""
    period_start: NotRequired[Nullable[int]]
    r"""Unix timestamp (in milliseconds) when the current period started."""
    period_end: NotRequired[Nullable[int]]
    r"""Unix timestamp (in milliseconds) when the current period ends."""
    canceled_at: NotRequired[Nullable[int]]
    r"""Unix timestamp (in milliseconds) when the subscription was canceled."""
    past_due_at: NotRequired[Nullable[int]]
    r"""Unix timestamp (in milliseconds) when the subscription became past due."""
    ended_at: NotRequired[Nullable[int]]
    r"""Unix timestamp (in milliseconds) when the subscription ended."""


class CommerceSubscriptionItem(BaseModel):
    object: CommerceSubscriptionItemObject
    r"""String representing the object's type. Objects of the same type share the same value."""

    id: str
    r"""Unique identifier for the subscription item."""

    instance_id: str
    r"""Unique identifier for the Clerk instance."""

    status: CommerceSubscriptionItemStatus
    r"""Current status of the subscription item."""

    plan_id: str
    r"""Unique identifier for the associated plan."""

    plan: Nullable[Plan]
    r"""The associated commerce plan."""

    plan_period: PlanPeriod
    r"""The billing period for this subscription."""

    payment_source_id: str
    r"""Unique identifier for the payment source."""

    payer_id: str
    r"""Unique identifier for the payer."""

    is_free_trial: bool
    r"""Whether this subscription is currently on a free trial."""

    proration_date: str
    r"""Date used for proration calculations."""

    created_at: int
    r"""Unix timestamp (in milliseconds) when the subscription was created."""

    updated_at: int
    r"""Unix timestamp (in milliseconds) when the subscription was last updated."""

    credit: OptionalNullable[Credit] = UNSET
    r"""Credit information (only available in PaymentAttempt events)."""

    payment_source: OptionalNullable[PaymentSource] = UNSET
    r"""The payment source associated with this subscription."""

    lifetime_paid: OptionalNullable[LifetimePaid] = UNSET
    r"""Total amount paid over the lifetime of this subscription."""

    amount: OptionalNullable[Amount] = UNSET
    r"""Current amount for this subscription."""

    next_invoice: OptionalNullable[NextInvoice] = UNSET
    r"""Information about the next invoice."""

    next_payment: OptionalNullable[NextPayment] = UNSET
    r"""Information about the next payment."""

    payer: OptionalNullable[Payer] = UNSET
    r"""The payer associated with this subscription."""

    period_start: OptionalNullable[int] = UNSET
    r"""Unix timestamp (in milliseconds) when the current period started."""

    period_end: OptionalNullable[int] = UNSET
    r"""Unix timestamp (in milliseconds) when the current period ends."""

    canceled_at: OptionalNullable[int] = UNSET
    r"""Unix timestamp (in milliseconds) when the subscription was canceled."""

    past_due_at: OptionalNullable[int] = UNSET
    r"""Unix timestamp (in milliseconds) when the subscription became past due."""

    ended_at: OptionalNullable[int] = UNSET
    r"""Unix timestamp (in milliseconds) when the subscription ended."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "credit",
            "payment_source",
            "lifetime_paid",
            "amount",
            "next_invoice",
            "next_payment",
            "payer",
            "period_start",
            "period_end",
            "canceled_at",
            "past_due_at",
            "ended_at",
        ]
        nullable_fields = [
            "credit",
            "plan",
            "payment_source",
            "lifetime_paid",
            "amount",
            "next_invoice",
            "next_payment",
            "payer",
            "period_start",
            "period_end",
            "canceled_at",
            "past_due_at",
            "ended_at",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
