"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
from pydantic import model_serializer
from typing import Any, Dict, Optional
from typing_extensions import NotRequired, TypedDict


class OrganizationInvitationObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value."""

    ORGANIZATION_INVITATION = "organization_invitation"


class OrganizationInvitationTypedDict(TypedDict):
    r"""An organization invitation"""

    object: OrganizationInvitationObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    id: str
    email_address: str
    role: str
    role_name: str
    public_metadata: Dict[str, Any]
    url: Nullable[str]
    expires_at: Nullable[int]
    r"""Unix timestamp of expiration."""
    created_at: int
    r"""Unix timestamp of creation."""
    updated_at: int
    r"""Unix timestamp of last update."""
    organization_id: NotRequired[str]
    status: NotRequired[str]
    private_metadata: NotRequired[Dict[str, Any]]


class OrganizationInvitation(BaseModel):
    r"""An organization invitation"""

    object: OrganizationInvitationObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """

    id: str

    email_address: str

    role: str

    role_name: str

    public_metadata: Dict[str, Any]

    url: Nullable[str]

    expires_at: Nullable[int]
    r"""Unix timestamp of expiration."""

    created_at: int
    r"""Unix timestamp of creation."""

    updated_at: int
    r"""Unix timestamp of last update."""

    organization_id: Optional[str] = None

    status: Optional[str] = None

    private_metadata: Optional[Dict[str, Any]] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["organization_id", "status", "private_metadata"]
        nullable_fields = ["url", "expires_at"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
