"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from clerk_backend_api.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from pydantic import model_serializer
from typing import Any, Dict, List
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateOrganizationInvitationBulkRequestBodyTypedDict(TypedDict):
    email_address: str
    r"""The email address of the new member that is going to be invited to the organization"""
    role: str
    r"""The role of the new member in the organization"""
    inviter_user_id: NotRequired[Nullable[str]]
    r"""The ID of the user that invites the new member to the organization.
    Must be an administrator in the organization.
    """
    public_metadata: NotRequired[Nullable[Dict[str, Any]]]
    r"""Metadata saved on the organization invitation, read-only from the Frontend API and fully accessible (read/write) from the Backend API.
    When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
    """
    private_metadata: NotRequired[Nullable[Dict[str, Any]]]
    r"""Metadata saved on the organization invitation, fully accessible (read/write) from the Backend API but not visible from the Frontend API.
    When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
    """
    redirect_url: NotRequired[Nullable[str]]
    r"""Optional URL that the invitee will be redirected to once they accept the invitation by clicking the join link in the invitation email."""
    expires_in_days: NotRequired[Nullable[int]]
    r"""The number of days the invitation will be valid for. By default, the invitation has a 30 days expire."""


class CreateOrganizationInvitationBulkRequestBody(BaseModel):
    email_address: str
    r"""The email address of the new member that is going to be invited to the organization"""

    role: str
    r"""The role of the new member in the organization"""

    inviter_user_id: OptionalNullable[str] = UNSET
    r"""The ID of the user that invites the new member to the organization.
    Must be an administrator in the organization.
    """

    public_metadata: OptionalNullable[Dict[str, Any]] = UNSET
    r"""Metadata saved on the organization invitation, read-only from the Frontend API and fully accessible (read/write) from the Backend API.
    When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
    """

    private_metadata: OptionalNullable[Dict[str, Any]] = UNSET
    r"""Metadata saved on the organization invitation, fully accessible (read/write) from the Backend API but not visible from the Frontend API.
    When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
    """

    redirect_url: OptionalNullable[str] = UNSET
    r"""Optional URL that the invitee will be redirected to once they accept the invitation by clicking the join link in the invitation email."""

    expires_in_days: OptionalNullable[int] = UNSET
    r"""The number of days the invitation will be valid for. By default, the invitation has a 30 days expire."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "inviter_user_id",
            "public_metadata",
            "private_metadata",
            "redirect_url",
            "expires_in_days",
        ]
        nullable_fields = [
            "inviter_user_id",
            "public_metadata",
            "private_metadata",
            "redirect_url",
            "expires_in_days",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CreateOrganizationInvitationBulkRequestTypedDict(TypedDict):
    organization_id: str
    r"""The organization ID."""
    request_body: List[CreateOrganizationInvitationBulkRequestBodyTypedDict]


class CreateOrganizationInvitationBulkRequest(BaseModel):
    organization_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The organization ID."""

    request_body: Annotated[
        List[CreateOrganizationInvitationBulkRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]
