"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from clerk_backend_api import models, utils
from clerk_backend_api._hooks import HookContext
from clerk_backend_api.types import OptionalNullable, UNSET
from datetime import datetime
from typing import Any, Dict, List, Mapping, Optional, Union


class Management(BaseSDK):
    def upsert_user(
        self,
        *,
        security: Union[
            models.ManagementUpsertUserSecurity,
            models.ManagementUpsertUserSecurityTypedDict,
        ],
        email_address: str,
        first_name: str,
        last_name: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.User]:
        r"""Upsert a user

        Upsert a user using the provided information. If a user with the same email_address exists, it will be updated. Otherwise, a new user will be created.
        This endpoint is internal and requires a specific management token for authorization.


        :param security:
        :param email_address: The email address of the user.
        :param first_name: The first name of the user.
        :param last_name: The last name of the user.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ManagementUpsertUserRequest(
            email_address=email_address,
            first_name=first_name,
            last_name=last_name,
        )

        req = self._build_request(
            method="POST",
            path="/management/users",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ManagementUpsertUserSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.ManagementUpsertUserRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="ManagementUpsertUser",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.User])
        if utils.match_response(
            http_res, ["400", "401", "403", "422"], "application/json"
        ):
            response_data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
            raise models.ClerkErrors(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def upsert_user_async(
        self,
        *,
        security: Union[
            models.ManagementUpsertUserSecurity,
            models.ManagementUpsertUserSecurityTypedDict,
        ],
        email_address: str,
        first_name: str,
        last_name: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.User]:
        r"""Upsert a user

        Upsert a user using the provided information. If a user with the same email_address exists, it will be updated. Otherwise, a new user will be created.
        This endpoint is internal and requires a specific management token for authorization.


        :param security:
        :param email_address: The email address of the user.
        :param first_name: The first name of the user.
        :param last_name: The last name of the user.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ManagementUpsertUserRequest(
            email_address=email_address,
            first_name=first_name,
            last_name=last_name,
        )

        req = self._build_request_async(
            method="POST",
            path="/management/users",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ManagementUpsertUserSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.ManagementUpsertUserRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="ManagementUpsertUser",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.User])
        if utils.match_response(
            http_res, ["400", "401", "403", "422"], "application/json"
        ):
            response_data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
            raise models.ClerkErrors(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def create_organization(
        self,
        *,
        security: Union[
            models.ManagementCreateOrganizationSecurity,
            models.ManagementCreateOrganizationSecurityTypedDict,
        ],
        name: str,
        slug: str,
        created_by: Optional[str] = None,
        max_allowed_memberships: Optional[int] = None,
        public_metadata: Optional[
            Union[models.PublicMetadata, models.PublicMetadataTypedDict]
        ] = None,
        private_metadata: Optional[
            Union[models.PrivateMetadata, models.PrivateMetadataTypedDict]
        ] = None,
        created_at: Optional[datetime] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.Organization]:
        r"""Create an organization

        Create a new organization.
        This endpoint is internal and requires a specific management token for authorization.


        :param security:
        :param name: The name of the organization.
        :param slug: The slug of the organization.
        :param created_by: The ID of the user who created the organization.
        :param max_allowed_memberships: The maximum allowed memberships for the organization.
        :param public_metadata: Public metadata for the organization.
        :param private_metadata: Private metadata for the organization.
        :param created_at: The creation timestamp in RFC3339 format.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ManagementCreateOrganizationRequest(
            name=name,
            slug=slug,
            created_by=created_by,
            max_allowed_memberships=max_allowed_memberships,
            public_metadata=utils.get_pydantic_model(
                public_metadata, Optional[models.PublicMetadata]
            ),
            private_metadata=utils.get_pydantic_model(
                private_metadata, Optional[models.PrivateMetadata]
            ),
            created_at=created_at,
        )

        req = self._build_request(
            method="POST",
            path="/management/organizations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ManagementCreateOrganizationSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request,
                False,
                False,
                "json",
                models.ManagementCreateOrganizationRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="ManagementCreateOrganization",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.Organization])
        if utils.match_response(
            http_res, ["400", "401", "403", "422"], "application/json"
        ):
            response_data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
            raise models.ClerkErrors(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def create_organization_async(
        self,
        *,
        security: Union[
            models.ManagementCreateOrganizationSecurity,
            models.ManagementCreateOrganizationSecurityTypedDict,
        ],
        name: str,
        slug: str,
        created_by: Optional[str] = None,
        max_allowed_memberships: Optional[int] = None,
        public_metadata: Optional[
            Union[models.PublicMetadata, models.PublicMetadataTypedDict]
        ] = None,
        private_metadata: Optional[
            Union[models.PrivateMetadata, models.PrivateMetadataTypedDict]
        ] = None,
        created_at: Optional[datetime] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.Organization]:
        r"""Create an organization

        Create a new organization.
        This endpoint is internal and requires a specific management token for authorization.


        :param security:
        :param name: The name of the organization.
        :param slug: The slug of the organization.
        :param created_by: The ID of the user who created the organization.
        :param max_allowed_memberships: The maximum allowed memberships for the organization.
        :param public_metadata: Public metadata for the organization.
        :param private_metadata: Private metadata for the organization.
        :param created_at: The creation timestamp in RFC3339 format.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ManagementCreateOrganizationRequest(
            name=name,
            slug=slug,
            created_by=created_by,
            max_allowed_memberships=max_allowed_memberships,
            public_metadata=utils.get_pydantic_model(
                public_metadata, Optional[models.PublicMetadata]
            ),
            private_metadata=utils.get_pydantic_model(
                private_metadata, Optional[models.PrivateMetadata]
            ),
            created_at=created_at,
        )

        req = self._build_request_async(
            method="POST",
            path="/management/organizations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ManagementCreateOrganizationSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request,
                False,
                False,
                "json",
                models.ManagementCreateOrganizationRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="ManagementCreateOrganization",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.Organization])
        if utils.match_response(
            http_res, ["400", "401", "403", "422"], "application/json"
        ):
            response_data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
            raise models.ClerkErrors(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def create_application(
        self,
        *,
        security: Union[
            models.ManagementCreateApplicationSecurity,
            models.ManagementCreateApplicationSecurityTypedDict,
        ],
        name: str,
        owner_id: str,
        plan_id: str,
        addon_ids: Optional[List[str]] = None,
        paid_externally: Optional[bool] = None,
        test_mode: Optional[bool] = None,
        max_allowed_users: Optional[int] = None,
        max_allowed_organizations: Optional[int] = None,
        subscription_metadata: Optional[Dict[str, str]] = None,
        environment_types: Optional[List[models.EnvironmentTypes]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.ManagementApplicationResponse]:
        r"""Create an application (instance)

        Create a new application (instance).
        This endpoint is internal and requires a specific management token for authorization.


        :param security:
        :param name: The name of the application.
        :param owner_id: The owner ID (organization ID) of the application.
        :param plan_id: The plan ID for the application (e.g., \"free_2022_06\", \"pro_2023_11\").
        :param addon_ids: List of add-on IDs (e.g., [\"enhanced_auth_2023_11\", \"enhanced_orgs_2023_11\"]).
        :param paid_externally: Whether the application is paid externally.
        :param test_mode: Whether the application is in test mode.
        :param max_allowed_users: Maximum allowed users for the application.
        :param max_allowed_organizations: Maximum allowed organizations for the application.
        :param subscription_metadata: Subscription metadata for the application.
        :param environment_types: List of environment types to create instances for.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ManagementCreateApplicationRequest(
            name=name,
            owner_id=owner_id,
            plan_id=plan_id,
            addon_ids=addon_ids,
            paid_externally=paid_externally,
            test_mode=test_mode,
            max_allowed_users=max_allowed_users,
            max_allowed_organizations=max_allowed_organizations,
            subscription_metadata=subscription_metadata,
            environment_types=environment_types,
        )

        req = self._build_request(
            method="POST",
            path="/management/applications",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ManagementCreateApplicationSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.ManagementCreateApplicationRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="ManagementCreateApplication",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, Optional[models.ManagementApplicationResponse]
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "422"], "application/json"
        ):
            response_data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
            raise models.ClerkErrors(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def create_application_async(
        self,
        *,
        security: Union[
            models.ManagementCreateApplicationSecurity,
            models.ManagementCreateApplicationSecurityTypedDict,
        ],
        name: str,
        owner_id: str,
        plan_id: str,
        addon_ids: Optional[List[str]] = None,
        paid_externally: Optional[bool] = None,
        test_mode: Optional[bool] = None,
        max_allowed_users: Optional[int] = None,
        max_allowed_organizations: Optional[int] = None,
        subscription_metadata: Optional[Dict[str, str]] = None,
        environment_types: Optional[List[models.EnvironmentTypes]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.ManagementApplicationResponse]:
        r"""Create an application (instance)

        Create a new application (instance).
        This endpoint is internal and requires a specific management token for authorization.


        :param security:
        :param name: The name of the application.
        :param owner_id: The owner ID (organization ID) of the application.
        :param plan_id: The plan ID for the application (e.g., \"free_2022_06\", \"pro_2023_11\").
        :param addon_ids: List of add-on IDs (e.g., [\"enhanced_auth_2023_11\", \"enhanced_orgs_2023_11\"]).
        :param paid_externally: Whether the application is paid externally.
        :param test_mode: Whether the application is in test mode.
        :param max_allowed_users: Maximum allowed users for the application.
        :param max_allowed_organizations: Maximum allowed organizations for the application.
        :param subscription_metadata: Subscription metadata for the application.
        :param environment_types: List of environment types to create instances for.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ManagementCreateApplicationRequest(
            name=name,
            owner_id=owner_id,
            plan_id=plan_id,
            addon_ids=addon_ids,
            paid_externally=paid_externally,
            test_mode=test_mode,
            max_allowed_users=max_allowed_users,
            max_allowed_organizations=max_allowed_organizations,
            subscription_metadata=subscription_metadata,
            environment_types=environment_types,
        )

        req = self._build_request_async(
            method="POST",
            path="/management/applications",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ManagementCreateApplicationSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.ManagementCreateApplicationRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="ManagementCreateApplication",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, Optional[models.ManagementApplicationResponse]
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "422"], "application/json"
        ):
            response_data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
            raise models.ClerkErrors(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
